import { MarketPlaceActionEnum, MarketPlaceIdentifier, MarketPlacePricingFilterValues, ProjectIdWithAttributes, PaginationConfig, MarketPlaceTxErrorEnum, StringInputArg, TimePeriodEnum, Day_Lookback_Enum, NonMarketPlaceActionEnum, UserTimestamp } from "./sdk";
export declare enum DayLookbackEnum {
    Month = "MONTH",
    OneDay = "ONE_DAY",
    SevenDay = "SEVEN_DAY"
}
export declare type GetMarketplaceSnapshotCondition = {
    name?: StringInputArg;
    projects?: ProjectIdWithAttributes[];
    tokenAddresses?: string[];
    excludeTokensWithoutMetadata?: boolean;
    onlyListings?: boolean;
    priceFilter?: MarketPlacePricingFilterValues;
    rankFilter?: MarketPlacePricingFilterValues;
    includeAttributeInformation?: boolean;
    includeProjectFloorPrice?: boolean;
    filterPoolListings?: boolean;
    onlyHyperspace?: boolean;
};
export declare enum TimeGranularityEnum {
    PER_FIVE_MINUTES = "PER_FIVE_MINUTES",
    PER_HOUR = "PER_HOUR",
    PER_DAY = "PER_DAY"
}
export declare type MarketplaceActionEnums = MarketPlaceActionEnum.Bid | MarketPlaceActionEnum.Delisting | MarketPlaceActionEnum.Listing | MarketPlaceActionEnum.Transaction | MarketPlaceActionEnum.Updatelisting | MarketPlaceActionEnum.Updatebid | MarketPlaceActionEnum.Cancelbid;
export declare type NonMarketplaceActionEnums = NonMarketPlaceActionEnum.Mint;
export declare type GetMarketplaceStateCondition = {
    tokenAddresses: string[];
    actionType?: MarketplaceActionEnums | string;
    buyerAddress?: string;
    sellerAddress?: string;
    marketPlaceIdentifiers?: MarketPlaceIdentifier[];
};
export declare type GetTokenHistoryCondition = {
    tokenAddresses: string[];
    actionType?: MarketplaceActionEnums | string;
    marketPlaceIdentifiers?: MarketPlaceIdentifier[];
};
export declare type GetUserActionsCondition = {
    userAddress: string;
    marketPlaceIdentifiers?: MarketPlaceIdentifier[];
};
export declare type GetUserHistoryCondition = {
    userAddress: string;
    actionTypes?: MarketplaceActionEnums[];
    nonMpaActionTypes?: NonMarketplaceActionEnums[];
};
export declare type GetProjectHistoryCondition = {
    projects: ProjectIdWithAttributes[];
    actionTypes?: MarketplaceActionEnums[];
    nonMpaActionTypes?: NonMarketplaceActionEnums[];
};
export declare type GetProjectStatHistCondition = {
    projects: string[];
    startTimestamp: number;
    endTimestamp: number;
    timeGranularity: TimeGranularityEnum | string;
    paginationInfo?: PaginationConfig;
};
export declare type SearchProjectCondition = {
    name?: String;
    matchName?: StringInputArg;
    twitter?: StringInputArg;
    meSlug?: StringInputArg;
    excludeAttributes?: boolean;
    tag?: string;
};
export declare type GetProjectsCondition = {
    projectIds?: string[];
    excludeProjectAttributes?: boolean;
    tags?: string[];
    isVerified?: boolean;
    floorPriceFilter?: MarketPlacePricingFilterValues;
};
export declare type GetBuyTxQuery = {
    __typename?: "Query";
    createBuyTx: {
        __typename?: "MarketPlaceTxOutput";
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        stdBuffer?: Array<number> | null;
        error?: {
            __typename?: "MarketPlaceTxOutputError";
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetWalletStatsCondition = {
    searchAddress?: string;
    timePeriod?: TimePeriodEnum | string;
    includeUserRank?: boolean;
};
export declare type GetWalletStatsHistCondition = {
    searchAddress: string;
    dayLookback?: Day_Lookback_Enum | DayLookbackEnum | string;
};
export declare type GetUpcomingProjectsCondition = {
    name?: string;
    userTimestamp: UserTimestamp;
    searchName?: string;
    isFeatured?: boolean;
    isLaunchpad?: boolean;
};
export declare type GetNonMarketplaceActionsByProjectCondition = {
    projects: ProjectIdWithAttributes[];
    nonMpaActionTypes: NonMarketplaceActionEnums[];
};
export declare type GetNonMarketplaceActionsByUserCondition = {
    userAddress: string;
    nonMpaActionTypes: NonMarketplaceActionEnums[];
};
