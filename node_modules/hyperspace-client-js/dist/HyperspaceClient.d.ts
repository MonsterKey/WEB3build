import { GetAcceptBidTxQuery, GetAcceptBidTxQueryVariables, GetBidTxQuery, GetBidTxQueryVariables, GetBuyTxQueryVariables, GetCancelBidTxQuery, GetCancelBidTxQueryVariables, GetDelistTxQuery, GetDelistTxQueryVariables, GetListTxQuery, GetListTxQueryVariables, GetMarketplaceSnapshotsQuery, GetMarketplaceStatusQuery, GetProjectHistoryQuery, GetProjectStatsQuery, GetTokenHistoryQuery, GetTokenStateQuery, GetUserBidsQuery, GetUserHistoryQuery, GetUserListingsQuery, GetWithdrawEscrowTxQuery, GetWithdrawEscrowTxQueryVariables, OrderConfig, PaginationConfig, Sdk, SearchProjectByNameQuery, SendBuyTxQuery, SendBuyTxQueryVariables, GetWalletStatsQuery, GetWalletStatsHistQuery, GetUpcomingProjectsQuery, GetOverallWalletStatsQuery, GetNonMpaProjectHistoryQuery, GetNonMpaUserHistoryQuery } from "./sdk";
import { GraphQLClient } from "graphql-request";
import { GetMarketplaceSnapshotCondition, GetMarketplaceStateCondition, GetProjectsCondition, GetProjectHistoryCondition, GetTokenHistoryCondition, GetUserActionsCondition, GetUserHistoryCondition, SearchProjectCondition, GetProjectStatHistCondition, GetBuyTxQuery, GetWalletStatsCondition, GetWalletStatsHistCondition, GetUpcomingProjectsCondition, GetNonMarketplaceActionsByProjectCondition, GetNonMarketplaceActionsByUserCondition } from "./types";
export declare class HyperspaceClient {
    apiKey: string;
    graphqlClient: GraphQLClient;
    sdk: Sdk;
    headers: any;
    constructor(apiKey: string);
    getWalletStats({ condition, orderBy, paginationInfo, }: {
        condition: GetWalletStatsCondition;
        orderBy?: OrderConfig;
        paginationInfo?: PaginationConfig;
    }): Promise<GetWalletStatsQuery>;
    getWalletStatsHist({ condition, }: {
        condition: GetWalletStatsHistCondition;
    }): Promise<GetWalletStatsHistQuery>;
    searchProjectByName({ condition, }: {
        condition: SearchProjectCondition;
    }): Promise<SearchProjectByNameQuery>;
    getProjects({ condition, orderBy, paginationInfo, }: {
        condition?: GetProjectsCondition;
        orderBy?: OrderConfig;
        paginationInfo?: PaginationConfig;
    }): Promise<GetProjectStatsQuery>;
    getProjectStatHistory({ projects, startTimestamp, endTimestamp, timeGranularity, paginationInfo, }: GetProjectStatHistCondition): Promise<import("./sdk").GetProjectStatHistoryQuery>;
    getMarketplaceStatus(): Promise<GetMarketplaceStatusQuery>;
    getUpcomingProjects({ condition, orderBy, paginationInfo }: {
        condition?: GetUpcomingProjectsCondition;
        orderBy?: OrderConfig;
        paginationInfo?: PaginationConfig;
    }): Promise<GetUpcomingProjectsQuery>;
    getOverallWalletStats(): Promise<GetOverallWalletStatsQuery>;
    getNonMpaProjectHistory({ condition, paginationInfo }: {
        condition: GetNonMarketplaceActionsByProjectCondition;
        paginationInfo?: PaginationConfig;
    }): Promise<GetNonMpaProjectHistoryQuery>;
    getNonMpaUserHistory({ condition, paginationInfo }: {
        condition: GetNonMarketplaceActionsByUserCondition;
        paginationInfo?: PaginationConfig;
    }): Promise<GetNonMpaUserHistoryQuery>;
    getMarketplaceSnapshot({ condition, orderBy, paginationInfo, }: {
        condition?: GetMarketplaceSnapshotCondition;
        orderBy?: OrderConfig;
        paginationInfo?: PaginationConfig;
    }): Promise<GetMarketplaceSnapshotsQuery>;
    getTokenState({ condition, orderBy, paginationInfo, }: {
        condition: GetMarketplaceStateCondition;
        orderBy?: OrderConfig;
        paginationInfo?: PaginationConfig;
    }): Promise<GetTokenStateQuery>;
    getUserBids({ condition, orderBy, }: {
        condition: GetUserActionsCondition;
        orderBy?: OrderConfig;
    }): Promise<GetUserBidsQuery>;
    getUserListings({ condition, orderBy, }: {
        condition: GetUserActionsCondition;
        orderBy?: OrderConfig;
    }): Promise<GetUserListingsQuery>;
    getTokenHistory({ condition, paginationInfo, }: {
        condition: GetTokenHistoryCondition;
        paginationInfo?: PaginationConfig;
    }): Promise<GetTokenHistoryQuery>;
    getUserHistory({ condition, paginationInfo, }: {
        condition: GetUserHistoryCondition;
        paginationInfo?: PaginationConfig;
    }): Promise<GetUserHistoryQuery>;
    getProjectHistory({ condition, paginationInfo, }: {
        condition: GetProjectHistoryCondition;
        paginationInfo?: PaginationConfig;
    }): Promise<GetProjectHistoryQuery>;
    handleCreateBuyTx({ buyerAddress, buyerBroker, buyerBrokerBasisPoints, price, tokenAddress, unverified, ignoreFundCheck }: GetBuyTxQueryVariables): Promise<GetBuyTxQuery>;
    createBuyTx({ buyerAddress, buyerBroker, buyerBrokerBasisPoints, price, tokenAddress, unverified, }: GetBuyTxQueryVariables): Promise<GetBuyTxQuery>;
    sendBuyTx({ metadata, data, hexData, }: SendBuyTxQueryVariables): Promise<SendBuyTxQuery>;
    createListTx({ sellerAddress, sellerBroker, tokenAddress, price, sellerBrokerBasisPoints, }: GetListTxQueryVariables): Promise<GetListTxQuery>;
    createDelistTx({ sellerAddress, tokenAddress, }: GetDelistTxQueryVariables): Promise<GetDelistTxQuery>;
    createBidTx({ buyerAddress, buyerBroker, buyerBrokerBasisPoints, price, tokenAddress, }: GetBidTxQueryVariables): Promise<GetBidTxQuery>;
    createAcceptBidTx({ sellerAddress, price, tokenAddress, sellerBroker, sellerBrokerBasisPoints, }: GetAcceptBidTxQueryVariables): Promise<GetAcceptBidTxQuery>;
    createCancelBidTx({ buyerAddress, tokenAddress, }: GetCancelBidTxQueryVariables): Promise<GetCancelBidTxQuery>;
    createWithdrawEscrowTx({ userAddress, amount, }: GetWithdrawEscrowTxQueryVariables): Promise<GetWithdrawEscrowTxQuery>;
    getApiKey(): string;
}
