"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperspaceClient = void 0;
var sdk_1 = require("./sdk");
var graphql_request_1 = require("graphql-request");
var SolanaWeb3 = require("opensea-solana");
var apiEndpoint = "https://beta.api.solanalysis.com/sdk";
var HyperspaceClient = /** @class */ (function () {
    function HyperspaceClient(apiKey) {
        this.apiKey = apiKey;
        this.graphqlClient = new graphql_request_1.GraphQLClient(apiEndpoint);
        this.headers = {
            authorization: "".concat(apiKey),
        };
        this.graphqlClient.setHeaders(this.headers);
        this.sdk = (0, sdk_1.getSdk)(this.graphqlClient);
    }
    HyperspaceClient.prototype.getWalletStats = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy, paginationInfo = _a.paginationInfo;
        return this.sdk.getWalletStats({
            condition: {
                search_address: condition.searchAddress,
                include_user_rank: condition.includeUserRank,
                time_period: condition.timePeriod,
            },
            orderBy: orderBy,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getWalletStatsHist = function (_a) {
        var condition = _a.condition;
        return this.sdk.getWalletStatsHist({
            condition: {
                search_address: condition.searchAddress,
                day_lookback: condition.dayLookback,
            },
        }, this.headers);
    };
    // Getters
    HyperspaceClient.prototype.searchProjectByName = function (_a) {
        var condition = _a.condition;
        var name = condition.name, tag = condition.tag, matchName = condition.matchName, meSlug = condition.meSlug, twitter = condition.twitter, excludeAttributes = condition.excludeAttributes;
        var conditionInput = {};
        if (name)
            conditionInput = {
                display_name: name,
            };
        if (tag)
            conditionInput = __assign(__assign({}, conditionInput), { tag: tag });
        if (matchName)
            conditionInput = __assign(__assign({}, conditionInput), { project_name: matchName });
        if (twitter)
            conditionInput = __assign(__assign({}, conditionInput), { twitter: twitter });
        if (meSlug)
            conditionInput = __assign(__assign({}, conditionInput), { me_slug: meSlug });
        if (excludeAttributes)
            conditionInput = __assign(__assign({}, conditionInput), { exclude_project_attributes: true });
        return this.sdk.searchProjectByName({
            condition: conditionInput,
        }, this.headers);
    };
    HyperspaceClient.prototype.getProjects = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy, paginationInfo = _a.paginationInfo;
        var parsedCondition = {};
        if (condition === null || condition === void 0 ? void 0 : condition.projectIds)
            parsedCondition.project_ids = condition.projectIds;
        if (condition === null || condition === void 0 ? void 0 : condition.excludeProjectAttributes)
            parsedCondition.exclude_project_attributes =
                condition.excludeProjectAttributes;
        if (condition === null || condition === void 0 ? void 0 : condition.tags)
            parsedCondition.tags = condition.tags;
        if (condition === null || condition === void 0 ? void 0 : condition.isVerified)
            parsedCondition.is_verified = true;
        if (condition === null || condition === void 0 ? void 0 : condition.floorPriceFilter)
            parsedCondition.floor_price = condition === null || condition === void 0 ? void 0 : condition.floorPriceFilter;
        return this.sdk.getProjectStats({
            conditions: parsedCondition,
            orderBy: orderBy,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getProjectStatHistory = function (_a) {
        var projects = _a.projects, startTimestamp = _a.startTimestamp, endTimestamp = _a.endTimestamp, timeGranularity = _a.timeGranularity, paginationInfo = _a.paginationInfo;
        if (projects.length < 1)
            throw Error("Invalid input, requires 1 project id");
        var parsedCondition = {
            project_ids: projects.slice(0, 1),
            start_timestamp: startTimestamp,
            end_timestamp: endTimestamp,
            time_granularity: timeGranularity,
        };
        return this.sdk.getProjectStatHistory({
            conditions: parsedCondition,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getMarketplaceStatus = function () {
        return this.sdk.getMarketplaceStatus(undefined, this.headers);
    };
    HyperspaceClient.prototype.getUpcomingProjects = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            user_timestamp: condition === null || condition === void 0 ? void 0 : condition.userTimestamp,
            is_featured: condition === null || condition === void 0 ? void 0 : condition.isFeatured,
            is_moonshot: condition === null || condition === void 0 ? void 0 : condition.isLaunchpad,
            display_name: condition === null || condition === void 0 ? void 0 : condition.searchName,
            project_name: condition === null || condition === void 0 ? void 0 : condition.name
        };
        return this.sdk.getUpcomingProjects({
            conditions: parsedCondition,
            order_by: orderBy,
            pagination_info: paginationInfo
        }, this.headers);
    };
    HyperspaceClient.prototype.getOverallWalletStats = function () {
        return this.sdk.getOverallWalletStats(undefined, this.headers);
    };
    HyperspaceClient.prototype.getNonMpaProjectHistory = function (_a) {
        var condition = _a.condition, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            projects: condition.projects,
            by_nmpa_types: condition.nonMpaActionTypes
        };
        return this.sdk.getNonMpaProjectHistory({
            condition: parsedCondition,
            paginationInfo: paginationInfo
        }, this.headers);
    };
    HyperspaceClient.prototype.getNonMpaUserHistory = function (_a) {
        var condition = _a.condition, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            source_address: condition.userAddress,
            destination_address: condition.userAddress,
            by_nmpa_types: condition.nonMpaActionTypes
        };
        return this.sdk.getNonMpaUserHistory({
            condition: parsedCondition,
            paginationInfo: paginationInfo
        }, this.headers);
    };
    HyperspaceClient.prototype.getMarketplaceSnapshot = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy, paginationInfo = _a.paginationInfo;
        var parsedCondition = {};
        if (condition === null || condition === void 0 ? void 0 : condition.projects)
            parsedCondition.project_ids = condition.projects;
        if (condition === null || condition === void 0 ? void 0 : condition.excludeTokensWithoutMetadata)
            parsedCondition.has_metadata = true;
        if (condition === null || condition === void 0 ? void 0 : condition.includeAttributeInformation)
            parsedCondition.include_attribute_details = true;
        if (condition === null || condition === void 0 ? void 0 : condition.includeProjectFloorPrice)
            parsedCondition.include_floors = true;
        if (condition === null || condition === void 0 ? void 0 : condition.onlyListings)
            parsedCondition.listing_type = sdk_1.MarketPlaceActionEnum.Listing;
        if (condition === null || condition === void 0 ? void 0 : condition.tokenAddresses)
            parsedCondition.token_addresses = condition.tokenAddresses;
        if (condition === null || condition === void 0 ? void 0 : condition.priceFilter)
            parsedCondition.price_filter = condition.priceFilter;
        if (condition === null || condition === void 0 ? void 0 : condition.name)
            parsedCondition.name = condition.name;
        if (condition === null || condition === void 0 ? void 0 : condition.rankFilter)
            parsedCondition.rank_filter = condition.rankFilter;
        if (condition === null || condition === void 0 ? void 0 : condition.onlyHyperspace)
            parsedCondition.only_listed_on_hs = true;
        if (condition === null || condition === void 0 ? void 0 : condition.filterPoolListings)
            parsedCondition.filter_pool_listings = true;
        return this.sdk.getMarketplaceSnapshots({
            condition: parsedCondition,
            order_by: orderBy,
            pagination_info: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getTokenState = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            token_addresses: condition.tokenAddresses,
        };
        if (condition.actionType)
            parsedCondition.action_type = condition.actionType;
        if (condition.buyerAddress)
            parsedCondition.buyer_address = condition.buyerAddress;
        if (condition.sellerAddress)
            parsedCondition.seller_address = condition.sellerAddress;
        if (condition.marketPlaceIdentifiers)
            parsedCondition.marketplace_ids = condition.marketPlaceIdentifiers;
        return this.sdk.getTokenState({
            //@ts-ignore
            condition: parsedCondition,
            orderBy: orderBy,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getUserBids = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy;
        var parsedCondition = {
            buyer_address: condition.userAddress,
        };
        if (condition.marketPlaceIdentifiers)
            parsedCondition.marketplace_ids = condition.marketPlaceIdentifiers;
        return this.sdk.getUserBids({
            condition: parsedCondition,
            order_by: orderBy,
        }, this.headers);
    };
    HyperspaceClient.prototype.getUserListings = function (_a) {
        var condition = _a.condition, orderBy = _a.orderBy;
        var parsedCondition = {
            seller_address: condition.userAddress,
        };
        if (condition.marketPlaceIdentifiers)
            parsedCondition.marketplace_ids = condition.marketPlaceIdentifiers;
        return this.sdk.getUserListings({
            condition: parsedCondition,
            orderBy: orderBy,
        }, this.headers);
    };
    HyperspaceClient.prototype.getTokenHistory = function (_a) {
        var condition = _a.condition, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            token_addresses: condition.tokenAddresses,
        };
        if (condition.actionType)
            parsedCondition.action_type = condition.actionType;
        if (condition.marketPlaceIdentifiers)
            parsedCondition.marketplace_ids = condition.marketPlaceIdentifiers;
        return this.sdk.getTokenHistory({
            condition: parsedCondition,
            orderBy: [
                { field_name: "block_timestamp", sort_order: sdk_1.SortOrderEnum.Desc },
            ],
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getUserHistory = function (_a) {
        var condition = _a.condition, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            seller_address: condition.userAddress,
            buyer_address: condition.userAddress,
        };
        if (condition.actionTypes)
            parsedCondition.by_mpa_types = condition.actionTypes;
        else
            parsedCondition.by_mpa_types = [];
        if (condition.nonMpaActionTypes)
            parsedCondition.by_nmpa_types = condition.nonMpaActionTypes;
        else
            parsedCondition.by_nmpa_types = [];
        return this.sdk.getUserHistory({
            condition: parsedCondition,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.getProjectHistory = function (_a) {
        var condition = _a.condition, paginationInfo = _a.paginationInfo;
        var parsedCondition = {
            projects: condition.projects,
        };
        if (condition.actionTypes)
            parsedCondition.by_mpa_types = condition.actionTypes;
        else
            parsedCondition.by_mpa_types = [];
        if (condition.nonMpaActionTypes)
            parsedCondition.by_nmpa_types = condition.nonMpaActionTypes;
        else
            parsedCondition.by_nmpa_types = [];
        return this.sdk.getProjectHistory({
            condition: parsedCondition,
            paginationInfo: paginationInfo,
        }, this.headers);
    };
    HyperspaceClient.prototype.handleCreateBuyTx = function (_a) {
        var buyerAddress = _a.buyerAddress, buyerBroker = _a.buyerBroker, buyerBrokerBasisPoints = _a.buyerBrokerBasisPoints, price = _a.price, tokenAddress = _a.tokenAddress, unverified = _a.unverified, ignoreFundCheck = _a.ignoreFundCheck;
        return __awaiter(this, void 0, void 0, function () {
            var response, txObj;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sdk.getBuyTx({
                            buyerAddress: buyerAddress,
                            buyerBroker: buyerBroker,
                            buyerBrokerBasisPoints: buyerBrokerBasisPoints,
                            price: price,
                            tokenAddress: tokenAddress,
                            unverified: unverified,
                            ignoreFundCheck: ignoreFundCheck
                        }, this.headers)];
                    case 1:
                        response = _b.sent();
                        if (response.createBuyTx.data &&
                            !response.createBuyTx.error &&
                            response.createBuyTx.is_required_signers_on
                        // check if opensea
                        ) {
                            txObj = SolanaWeb3.Transaction.from(response.createBuyTx.data);
                            return [2 /*return*/, {
                                    createBuyTx: {
                                        data: response.createBuyTx.data,
                                        //@ts-ignore
                                        is_required_signers_on: true,
                                        //@ts-ignore
                                        metadata: response.createBuyTx.metadata,
                                        stdBuffer: response.createBuyTx.stdBuffer
                                    },
                                }];
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    // Marketplace Actions
    HyperspaceClient.prototype.createBuyTx = function (_a) {
        var buyerAddress = _a.buyerAddress, buyerBroker = _a.buyerBroker, buyerBrokerBasisPoints = _a.buyerBrokerBasisPoints, price = _a.price, tokenAddress = _a.tokenAddress, unverified = _a.unverified;
        return this.handleCreateBuyTx({
            buyerAddress: buyerAddress,
            buyerBroker: buyerBroker,
            buyerBrokerBasisPoints: buyerBrokerBasisPoints,
            price: price,
            tokenAddress: tokenAddress,
            unverified: unverified,
        });
    };
    HyperspaceClient.prototype.sendBuyTx = function (_a) {
        var metadata = _a.metadata, data = _a.data, hexData = _a.hexData;
        return this.sdk.sendBuyTx({
            metadata: metadata,
            data: data,
            hexData: hexData,
        });
    };
    HyperspaceClient.prototype.createListTx = function (_a) {
        var sellerAddress = _a.sellerAddress, sellerBroker = _a.sellerBroker, tokenAddress = _a.tokenAddress, price = _a.price, sellerBrokerBasisPoints = _a.sellerBrokerBasisPoints;
        return this.sdk.getListTx({
            sellerAddress: sellerAddress,
            sellerBroker: sellerBroker,
            tokenAddress: tokenAddress,
            price: price,
            sellerBrokerBasisPoints: sellerBrokerBasisPoints,
        }, this.headers);
    };
    HyperspaceClient.prototype.createDelistTx = function (_a) {
        var sellerAddress = _a.sellerAddress, tokenAddress = _a.tokenAddress;
        return this.sdk.getDelistTx({
            sellerAddress: sellerAddress,
            tokenAddress: tokenAddress,
        }, this.headers);
    };
    HyperspaceClient.prototype.createBidTx = function (_a) {
        var buyerAddress = _a.buyerAddress, buyerBroker = _a.buyerBroker, buyerBrokerBasisPoints = _a.buyerBrokerBasisPoints, price = _a.price, tokenAddress = _a.tokenAddress;
        return this.sdk.getBidTx({
            buyerAddress: buyerAddress,
            buyerBroker: buyerBroker,
            buyerBrokerBasisPoints: buyerBrokerBasisPoints,
            price: price,
            tokenAddress: tokenAddress,
        }, this.headers);
    };
    HyperspaceClient.prototype.createAcceptBidTx = function (_a) {
        var sellerAddress = _a.sellerAddress, price = _a.price, tokenAddress = _a.tokenAddress, sellerBroker = _a.sellerBroker, sellerBrokerBasisPoints = _a.sellerBrokerBasisPoints;
        return this.sdk.getAcceptBidTx({
            sellerAddress: sellerAddress,
            price: price,
            tokenAddress: tokenAddress,
            sellerBroker: sellerBroker,
            sellerBrokerBasisPoints: sellerBrokerBasisPoints,
        }, this.headers);
    };
    HyperspaceClient.prototype.createCancelBidTx = function (_a) {
        var buyerAddress = _a.buyerAddress, tokenAddress = _a.tokenAddress;
        return this.sdk.getCancelBidTx({
            buyerAddress: buyerAddress,
            tokenAddress: tokenAddress,
        }, this.headers);
    };
    HyperspaceClient.prototype.createWithdrawEscrowTx = function (_a) {
        var userAddress = _a.userAddress, amount = _a.amount;
        return this.sdk.getWithdrawEscrowTx({
            userAddress: userAddress,
            amount: amount,
        }, this.headers);
    };
    HyperspaceClient.prototype.getApiKey = function () {
        return this.apiKey;
    };
    return HyperspaceClient;
}());
exports.HyperspaceClient = HyperspaceClient;
