import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: any;
    DateTime: any;
    JSON: any;
};
export declare enum AttributeTypeEnum {
    Category = "CATEGORY",
    Numeric = "NUMERIC",
    Range = "RANGE"
}
export declare type CancelBidMarketPlaceActionInput = {
    buyer_address: Scalars['String'];
    buyer_referral_address: Scalars['String'];
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type CancelListingMarketPlaceActionInput = {
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    seller_address: Scalars['String'];
    seller_referral_address: Scalars['String'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare enum CollectionBidActionEnum {
    Cancelcollectionbid = "CANCELCOLLECTIONBID",
    Collectionbid = "COLLECTIONBID",
    Transaction = "TRANSACTION"
}
export declare type CollectionBidConfig = {
    __typename?: 'CollectionBidConfig';
    identifier_index?: Maybe<Scalars['Float']>;
    identifier_key: Scalars['String'];
    identifier_type: CollectionIdentifierTypeEnum;
    instance_id?: Maybe<Scalars['String']>;
    program_id: Scalars['String'];
    project_id: Scalars['String'];
};
export declare type CollectionBidState = {
    __typename?: 'CollectionBidState';
    amount?: Maybe<Scalars['Float']>;
    block_number?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    buyer_address?: Maybe<Scalars['String']>;
    buyer_referral_address?: Maybe<Scalars['String']>;
    buyer_referral_fee?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    currency?: Maybe<Scalars['String']>;
    currency_price?: Maybe<Scalars['Float']>;
    decimal?: Maybe<Scalars['Float']>;
    expiration?: Maybe<Scalars['Float']>;
    fee?: Maybe<Scalars['Float']>;
    fee_address?: Maybe<Scalars['String']>;
    identifier_index?: Maybe<Scalars['Float']>;
    identifier_key?: Maybe<Scalars['String']>;
    identifier_type: CollectionIdentifierTypeEnum;
    instance_id?: Maybe<Scalars['String']>;
    instruction_index?: Maybe<Scalars['Float']>;
    metadata?: Maybe<Scalars['JSON']>;
    price?: Maybe<Scalars['Float']>;
    program_id?: Maybe<Scalars['String']>;
    seller_address?: Maybe<Scalars['String']>;
    seller_referral_address?: Maybe<Scalars['String']>;
    seller_referral_fee?: Maybe<Scalars['Float']>;
    signature?: Maybe<Scalars['String']>;
    trade_state?: Maybe<Scalars['String']>;
    type?: Maybe<CollectionBidActionEnum>;
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare type CollectionDist = {
    __typename?: 'CollectionDist';
    count: Scalars['Float'];
    owned_band: Scalars['String'];
};
export declare enum CollectionIdentifierTypeEnum {
    FirstCreator = "FIRST_CREATOR",
    MasterEdition = "MASTER_EDITION",
    MccId = "MCC_ID"
}
export declare type CreateBidMarketPlaceActionInput = {
    buyer_address: Scalars['String'];
    buyer_referral_address: Scalars['String'];
    buyer_referral_fee: Scalars['Float'];
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type CreateListingMarketPlaceActionInput = {
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_referral_address: Scalars['String'];
    seller_referral_fee: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type CreateMarketPlaceActionsInput = {
    amount: Scalars['Float'];
    buyer_address: Scalars['String'];
    buyer_referral_address: Scalars['String'];
    buyer_referral_fee: Scalars['Float'];
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_referral_address: Scalars['String'];
    seller_referral_fee: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
    type: MarketPlaceActionEnum;
};
export declare type CreateTransactionMarketPlaceActionInput = {
    buyer_address: Scalars['String'];
    buyer_referral_address: Scalars['String'];
    buyer_referral_fee: Scalars['Float'];
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_referral_address: Scalars['String'];
    seller_referral_fee: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type CreateUpcomingProjectInstanceInput = {
    description?: InputMaybe<Scalars['String']>;
    discord?: InputMaybe<Scalars['String']>;
    display_name?: InputMaybe<Scalars['String']>;
    has_ended?: InputMaybe<Scalars['Boolean']>;
    img_url?: InputMaybe<Scalars['String']>;
    launch_date?: InputMaybe<Scalars['Date']>;
    launch_timestamp?: InputMaybe<Scalars['String']>;
    mint_site?: InputMaybe<Scalars['String']>;
    price?: InputMaybe<Scalars['String']>;
    project_name: Scalars['String'];
    protocol: ProtocolEnum;
    supply?: InputMaybe<Scalars['String']>;
    twitter?: InputMaybe<Scalars['String']>;
    website?: InputMaybe<Scalars['String']>;
};
export declare enum CrmPriorityEnum {
    Dead = "DEAD",
    High = "HIGH",
    Low = "LOW",
    Top = "TOP"
}
export declare enum Day_Lookback_Enum {
    Month = "MONTH",
    OneDay = "ONE_DAY",
    SevenDay = "SEVEN_DAY"
}
export declare type GetCollectionBidConfigResponse = {
    __typename?: 'GetCollectionBidConfigResponse';
    config?: Maybe<CollectionBidConfig>;
};
export declare type GetCollectionBidsResponse = {
    __typename?: 'GetCollectionBidsResponse';
    bids?: Maybe<Array<CollectionBidState>>;
};
export declare type GetCollectionDistCondition = {
    project_id: Scalars['String'];
};
export declare type GetCollectionDistOutput = {
    __typename?: 'GetCollectionDistOutput';
    collection_dist: Array<CollectionDist>;
};
export declare type GetFloorPriceDistCondition = {
    attributes?: InputMaybe<Array<Scalars['JSON']>>;
    project_id: Scalars['String'];
};
export declare type GetFloorPriceDistOutput = {
    __typename?: 'GetFloorPriceDistOutput';
    floor_prices?: Maybe<Array<Scalars['Float']>>;
};
export declare type GetMarketPlaceActionsByProjectsCondition = {
    by_mpa_types?: InputMaybe<Array<MarketPlaceActionEnum>>;
    by_nmpa_types?: InputMaybe<Array<NonMarketPlaceActionEnum>>;
    price_filter?: InputMaybe<MarketPlacePricingFilterValues>;
    projects: Array<ProjectIdWithAttributes>;
    rank_filter?: InputMaybe<MarketPlacePricingFilterValues>;
};
export declare type GetMarketPlaceActionsByTokenAddressCondition = {
    action_type?: InputMaybe<MarketPlaceActionEnum>;
    marketplace_ids?: InputMaybe<Array<MarketPlaceIdentifier>>;
    token_addresses: Array<Scalars['String']>;
};
export declare type GetMarketPlaceActionsByUserCondition = {
    buyer_address?: InputMaybe<Scalars['String']>;
    by_mpa_types?: InputMaybe<Array<MarketPlaceActionEnum>>;
    by_nmpa_types?: InputMaybe<Array<NonMarketPlaceActionEnum>>;
    destination_address?: InputMaybe<Scalars['String']>;
    seller_address?: InputMaybe<Scalars['String']>;
    source_address?: InputMaybe<Scalars['String']>;
};
export declare type GetMarketPlaceActionsOutput = {
    __typename?: 'GetMarketPlaceActionsOutput';
    market_place_actions: Array<MarketPlaceActions>;
    token_address: Scalars['String'];
};
export declare type GetMarketPlaceSnapshotCondition = {
    filter_pool_listings?: InputMaybe<Scalars['Boolean']>;
    has_metadata?: InputMaybe<Scalars['Boolean']>;
    include_attribute_details?: InputMaybe<Scalars['Boolean']>;
    include_floors?: InputMaybe<Scalars['Boolean']>;
    is_project_verified?: InputMaybe<Scalars['Boolean']>;
    listing_type?: InputMaybe<MarketPlaceActionEnum>;
    name?: InputMaybe<StringInputArg>;
    only_cross_mint_verified?: InputMaybe<Scalars['Boolean']>;
    only_listed_on_hs?: InputMaybe<Scalars['Boolean']>;
    price_filter?: InputMaybe<MarketPlacePricingFilterValues>;
    project_ids?: InputMaybe<Array<ProjectIdWithAttributes>>;
    rank_filter?: InputMaybe<MarketPlacePricingFilterValues>;
    token_addresses?: InputMaybe<Array<Scalars['String']>>;
    use_project_slug?: InputMaybe<Scalars['Boolean']>;
};
export declare type GetMarketPlaceSnapshotsResponse = {
    __typename?: 'GetMarketPlaceSnapshotsResponse';
    market_place_snapshots?: Maybe<Array<MarketPlaceSnapshotResponse>>;
    pagination_info: PaginationInfoResponseType;
};
export declare type GetMarketPlaceStateCondition = {
    action_type?: InputMaybe<MarketPlaceActionEnum>;
    buyer_address?: InputMaybe<Scalars['String']>;
    marketplace_ids?: InputMaybe<Array<MarketPlaceIdentifier>>;
    seller_address?: InputMaybe<Scalars['String']>;
    token_addresses?: InputMaybe<Array<Scalars['String']>>;
};
export declare type GetMarketPlaceStateResponse = {
    __typename?: 'GetMarketPlaceStateResponse';
    market_place_states: Array<MarketPlaceSnapshotResponse>;
    token_address: Scalars['String'];
};
export declare type GetMarketPlaceStatusResponse = {
    __typename?: 'GetMarketPlaceStatusResponse';
    mps: Array<MarketPlaceStatus>;
};
export declare type GetNonMarketPlaceActionsByProjectCondition = {
    by_nmpa_types?: InputMaybe<Array<NonMarketPlaceActionEnum>>;
    projects: Array<ProjectIdWithAttributes>;
};
export declare type GetNonMarketPlaceActionsByUserCondition = {
    by_nmpa_types?: InputMaybe<Array<NonMarketPlaceActionEnum>>;
    destination_address?: InputMaybe<Scalars['String']>;
    source_address?: InputMaybe<Scalars['String']>;
};
export declare type GetOverallProjectStatOutput = {
    __typename?: 'GetOverallProjectStatOutput';
    market_cap?: Maybe<Scalars['Float']>;
    previous_market_cap_change_in_sol?: Maybe<Scalars['Float']>;
    previous_volume_change_in_sol?: Maybe<Scalars['Float']>;
    volume?: Maybe<Scalars['Float']>;
    volume_1day?: Maybe<Scalars['Float']>;
};
export declare type GetOverallWalletStatOutput = {
    __typename?: 'GetOverallWalletStatOutput';
    largest_sale_1day?: Maybe<WalletStat>;
    top_buyer_1day?: Maybe<WalletStat>;
    top_seller_1day?: Maybe<WalletStat>;
};
export declare type GetOwnerDistOutput = {
    __typename?: 'GetOwnerDistOutput';
    owner_dist: Array<OwnerDist>;
};
export declare type GetOwnersDistCondition = {
    attributes?: InputMaybe<Array<Scalars['JSON']>>;
    project_id: Scalars['String'];
};
export declare type GetProjectAndCollectionBidsResponse = {
    __typename?: 'GetProjectAndCollectionBidsResponse';
    bids?: Maybe<Array<ProjectAndCollectionBid>>;
};
export declare type GetProjectStatByNameCondition = {
    display_name?: InputMaybe<Scalars['String']>;
    exclude_project_attributes?: InputMaybe<Scalars['Boolean']>;
    me_slug?: InputMaybe<StringInputArg>;
    project_name?: InputMaybe<StringInputArg>;
    tag?: InputMaybe<Scalars['String']>;
    twitter?: InputMaybe<StringInputArg>;
};
export declare type GetProjectStatCount = {
    __typename?: 'GetProjectStatCount';
    num_of_projects: Scalars['Float'];
};
export declare type GetProjectStatHistCondition = {
    end_timestamp: Scalars['Float'];
    project_ids: Array<Scalars['String']>;
    start_timestamp: Scalars['Float'];
    time_granularity: Scalars['String'];
};
export declare type GetProjectStatHistOutput = {
    __typename?: 'GetProjectStatHistOutput';
    pagination_info: PaginationInfoResponseType;
    project_stat_hist_entries?: Maybe<Array<ProjectStatHist>>;
};
export declare type GetProjectStatsCondition = {
    exclude_project_attributes?: InputMaybe<Scalars['Boolean']>;
    floor_price?: InputMaybe<MarketPlacePricingFilterValues>;
    is_verified?: InputMaybe<Scalars['Boolean']>;
    project_ids?: InputMaybe<Array<Scalars['String']>>;
    supply?: InputMaybe<SupplyInput>;
    tags?: InputMaybe<Array<Scalars['String']>>;
};
export declare type GetProjectStatsOutput = {
    __typename?: 'GetProjectStatsOutput';
    pagination_info: PaginationInfoResponseType;
    project_stats?: Maybe<Array<ProjectStat>>;
};
export declare type GetUpcomingProjectsCondition = {
    display_name?: InputMaybe<Scalars['String']>;
    is_featured?: InputMaybe<Scalars['Boolean']>;
    is_moonshot?: InputMaybe<Scalars['Boolean']>;
    project_name?: InputMaybe<Scalars['String']>;
    user_timestamp?: InputMaybe<UserTimestamp>;
};
export declare type GetUpcomingProjectsResponse = {
    __typename?: 'GetUpcomingProjectsResponse';
    pagination_info: PaginationInfoResponseType;
    upcoming_projects: Array<UpcomingProject>;
};
export declare type GetWalletStatsCondition = {
    include_user_rank?: InputMaybe<Scalars['Boolean']>;
    search_address?: InputMaybe<Scalars['String']>;
    time_period?: InputMaybe<TimePeriodEnum>;
};
export declare type GetWalletStatsHistCondition = {
    day_lookback?: InputMaybe<Day_Lookback_Enum>;
    search_address: Scalars['String'];
};
export declare type GetWalletStatsHistOutput = {
    __typename?: 'GetWalletStatsHistOutput';
    wallet_stats_history?: Maybe<Array<WalletStatHist>>;
};
export declare type GetWalletStatsOutput = {
    __typename?: 'GetWalletStatsOutput';
    pagination_info: PaginationInfoResponseType;
    wallet_stats?: Maybe<Array<WalletStat>>;
};
export declare enum LeadStateEnum {
    Closedlost = "CLOSEDLOST",
    Closedwon = "CLOSEDWON",
    Discovery = "DISCOVERY",
    Lead = "LEAD",
    Negotiation = "NEGOTIATION"
}
export declare type MpaPaginationConfig = {
    page_number?: InputMaybe<Scalars['Float']>;
    page_size?: InputMaybe<Scalars['Float']>;
    progressive_load?: InputMaybe<Scalars['Boolean']>;
};
export declare enum MarketPlaceActionEnum {
    Bid = "BID",
    Cancelbid = "CANCELBID",
    Delisting = "DELISTING",
    Failed = "FAILED",
    Fractionalized = "FRACTIONALIZED",
    Listing = "LISTING",
    Mint = "MINT",
    Other = "OTHER",
    PoolDeposit = "POOL_DEPOSIT",
    Rawbid = "RAWBID",
    Rawcancelbid = "RAWCANCELBID",
    Redeemed = "REDEEMED",
    Transaction = "TRANSACTION",
    Transfer = "TRANSFER",
    Unknown = "UNKNOWN",
    Updatebid = "UPDATEBID",
    Updatelisting = "UPDATELISTING",
    Upgrade = "UPGRADE"
}
export declare type MarketPlaceActionResponse = {
    __typename?: 'MarketPlaceActionResponse';
    amount?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    broker_referral_address?: Maybe<Scalars['String']>;
    broker_referral_fee?: Maybe<Scalars['Float']>;
    currency?: Maybe<Scalars['String']>;
    currency_price?: Maybe<Scalars['Float']>;
    decimal?: Maybe<Scalars['Float']>;
    escrow_address?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['Float']>;
    is_cross_mint_verified?: Maybe<Scalars['Boolean']>;
    marketplace_fee_address?: Maybe<Scalars['String']>;
    marketplace_instance_id?: Maybe<Scalars['String']>;
    marketplace_program_id?: Maybe<Scalars['String']>;
    metadata?: Maybe<Scalars['JSON']>;
    price?: Maybe<Scalars['Float']>;
    signature?: Maybe<Scalars['String']>;
    twitter?: Maybe<Scalars['String']>;
    type?: Maybe<MarketPlaceActionEnum>;
    user_address?: Maybe<Scalars['String']>;
};
export declare type MarketPlaceActions = {
    __typename?: 'MarketPlaceActions';
    amount?: Maybe<Scalars['Float']>;
    block_number?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    buyer_address?: Maybe<Scalars['String']>;
    buyer_referral_address?: Maybe<Scalars['String']>;
    buyer_referral_fee?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    currency?: Maybe<Scalars['String']>;
    currency_price?: Maybe<Scalars['Float']>;
    decimal?: Maybe<Scalars['Float']>;
    escrow_address?: Maybe<Scalars['String']>;
    expiry_time?: Maybe<Scalars['Float']>;
    fee?: Maybe<Scalars['Float']>;
    instruction_index?: Maybe<Scalars['Float']>;
    marketplace_fee_address?: Maybe<Scalars['String']>;
    marketplace_instance_id?: Maybe<Scalars['String']>;
    marketplace_program_id?: Maybe<Scalars['String']>;
    metadata?: Maybe<Scalars['JSON']>;
    price?: Maybe<Scalars['Float']>;
    seller_address?: Maybe<Scalars['String']>;
    seller_referral_address?: Maybe<Scalars['String']>;
    seller_referral_fee?: Maybe<Scalars['Float']>;
    signature?: Maybe<Scalars['String']>;
    token_address?: Maybe<Scalars['String']>;
    type?: Maybe<MarketPlaceActionEnum>;
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare type MarketPlaceIdentifier = {
    marketplace_instance_id?: InputMaybe<Scalars['String']>;
    marketplace_program_id: Scalars['String'];
};
export declare type MarketPlacePricingFilterValues = {
    field?: InputMaybe<Scalars['String']>;
    max?: InputMaybe<Scalars['Float']>;
    min?: InputMaybe<Scalars['Float']>;
};
export declare type MarketPlaceSnapshotResponse = {
    __typename?: 'MarketPlaceSnapshotResponse';
    attributes?: Maybe<Scalars['JSON']>;
    candy_machine_id?: Maybe<Scalars['String']>;
    created_at?: Maybe<Scalars['DateTime']>;
    first_creator?: Maybe<Scalars['String']>;
    floor_price?: Maybe<Scalars['Float']>;
    floor_price_1day_change?: Maybe<Scalars['Float']>;
    full_img?: Maybe<Scalars['String']>;
    highest_bid_mpa?: Maybe<MarketPlaceActionResponse>;
    howrare_rank?: Maybe<Scalars['Float']>;
    is_project_verified?: Maybe<Scalars['Boolean']>;
    lowest_listing_mpa?: Maybe<MarketPlaceActionResponse>;
    market_place_state?: Maybe<MarketPlaceState>;
    mcc_id?: Maybe<Scalars['String']>;
    meta_data_img?: Maybe<Scalars['String']>;
    meta_data_uri?: Maybe<Scalars['String']>;
    moonrank?: Maybe<Scalars['Float']>;
    name?: Maybe<Scalars['String']>;
    non_market_place_state?: Maybe<NonMarketPlaceActions>;
    owner?: Maybe<Scalars['String']>;
    project_attributes?: Maybe<Array<ProjectAttribute>>;
    project_description?: Maybe<Scalars['String']>;
    project_id: Scalars['String'];
    project_image?: Maybe<Scalars['String']>;
    project_name?: Maybe<Scalars['String']>;
    project_slug?: Maybe<Scalars['String']>;
    project_supply?: Maybe<Scalars['Float']>;
    rank_est?: Maybe<Scalars['Float']>;
    rarity_est?: Maybe<Scalars['Float']>;
    supply?: Maybe<Scalars['Float']>;
    token_address: Scalars['String'];
    updated_at?: Maybe<Scalars['DateTime']>;
    valuation_date?: Maybe<Scalars['DateTime']>;
    valuation_price?: Maybe<Scalars['Float']>;
};
export declare type MarketPlaceState = {
    __typename?: 'MarketPlaceState';
    amount?: Maybe<Scalars['Float']>;
    block_number?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    buyer_address?: Maybe<Scalars['String']>;
    buyer_referral_address?: Maybe<Scalars['String']>;
    buyer_referral_fee?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    currency?: Maybe<Scalars['String']>;
    currency_price?: Maybe<Scalars['Float']>;
    decimal?: Maybe<Scalars['Float']>;
    escrow_address?: Maybe<Scalars['String']>;
    expiry_time?: Maybe<Scalars['Float']>;
    fee?: Maybe<Scalars['Float']>;
    instruction_index?: Maybe<Scalars['Float']>;
    marketplace_fee_address?: Maybe<Scalars['String']>;
    marketplace_instance_id?: Maybe<Scalars['String']>;
    marketplace_program_id?: Maybe<Scalars['String']>;
    metadata?: Maybe<Scalars['JSON']>;
    price?: Maybe<Scalars['Float']>;
    seller_address?: Maybe<Scalars['String']>;
    seller_referral_address?: Maybe<Scalars['String']>;
    seller_referral_fee?: Maybe<Scalars['Float']>;
    signature?: Maybe<Scalars['String']>;
    token_address?: Maybe<Scalars['String']>;
    type?: Maybe<MarketPlaceActionEnum>;
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare type MarketPlaceStatus = {
    __typename?: 'MarketPlaceStatus';
    display_name: Scalars['String'];
    id: Scalars['String'];
    is_bidding_enabled: Scalars['Boolean'];
    is_buying_enabled: Scalars['Boolean'];
    is_delisting_enabled: Scalars['Boolean'];
    is_listing_enabled: Scalars['Boolean'];
    item_path?: Maybe<Scalars['String']>;
    marketplace_instance_id?: Maybe<Scalars['String']>;
    marketplace_program_id: Scalars['String'];
    website?: Maybe<Scalars['String']>;
};
export declare type MarketPlaceTxConfirmation = {
    __typename?: 'MarketPlaceTxConfirmation';
    error?: Maybe<MarketPlaceTxOutputError>;
    tx_id?: Maybe<Scalars['String']>;
};
export declare enum MarketPlaceTxErrorEnum {
    AlreadyOwnedNft = "ALREADY_OWNED_NFT",
    BasisPointsMismatch = "BASIS_POINTS_MISMATCH",
    BidNotFound = "BID_NOT_FOUND",
    BidStateAlreadyExists = "BID_STATE_ALREADY_EXISTS",
    BrokerMismatch = "BROKER_MISMATCH",
    BuyerHasInsufficientFunds = "BUYER_HAS_INSUFFICIENT_FUNDS",
    EscrowWithdrawAmountError = "ESCROW_WITHDRAW_AMOUNT_ERROR",
    Generic = "GENERIC",
    InternalServerError = "INTERNAL_SERVER_ERROR",
    InvalidInputError = "INVALID_INPUT_ERROR",
    InvalidTokenAddress = "INVALID_TOKEN_ADDRESS",
    InvalidUserBalance = "INVALID_USER_BALANCE",
    ItemListingNotFound = "ITEM_LISTING_NOT_FOUND",
    ItemNoLongerAvailable = "ITEM_NO_LONGER_AVAILABLE",
    MarketplaceBuyingIsDisabled = "MARKETPLACE_BUYING_IS_DISABLED",
    MarketplaceDoesnotHaveReqOn = "MARKETPLACE_DOESNOT_HAVE_REQ_ON",
    MarketplaceOperationIsDisabled = "MARKETPLACE_OPERATION_IS_DISABLED",
    OpenseaPleaseTryAgain = "OPENSEA_PLEASE_TRY_AGAIN",
    PriceHasUpdatedToBeHigher = "PRICE_HAS_UPDATED_TO_BE_HIGHER",
    PriceHasUpdatedToBeLower = "PRICE_HAS_UPDATED_TO_BE_LOWER",
    PriceMismatch = "PRICE_MISMATCH",
    RpcError = "RPC_ERROR",
    SellerOwnerMismatch = "SELLER_OWNER_MISMATCH"
}
export declare type MarketPlaceTxOutput = {
    __typename?: 'MarketPlaceTxOutput';
    data?: Maybe<Array<Scalars['Float']>>;
    error?: Maybe<MarketPlaceTxOutputError>;
    is_required_signers_on?: Maybe<Scalars['Boolean']>;
    metadata?: Maybe<Scalars['JSON']>;
    stdBuffer?: Maybe<Array<Scalars['Float']>>;
};
export declare type MarketPlaceTxOutputError = {
    __typename?: 'MarketPlaceTxOutputError';
    error_type?: Maybe<MarketPlaceTxErrorEnum>;
    message?: Maybe<Scalars['String']>;
    metadata?: Maybe<Scalars['JSON']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    cancelBidMarketPlaceAction: MarketPlaceActions;
    cancelListingMarketPlaceAction: MarketPlaceActions;
    createBidMarketPlaceAction: MarketPlaceActions;
    createListingMarketPlaceAction: MarketPlaceActions;
    createMarketPlaceAction: MarketPlaceActions;
    createTransactionMarketPlaceAction: MarketPlaceActions;
    createUpcomingProject: UpcomingProject;
    updateBidMarketPlaceAction: MarketPlaceActions;
    updateListingMarketPlaceAction: MarketPlaceActions;
    updateUpcomingProject: UpcomingProject;
};
export declare type MutationCancelBidMarketPlaceActionArgs = {
    data: CancelBidMarketPlaceActionInput;
};
export declare type MutationCancelListingMarketPlaceActionArgs = {
    data: CancelListingMarketPlaceActionInput;
};
export declare type MutationCreateBidMarketPlaceActionArgs = {
    data: CreateBidMarketPlaceActionInput;
};
export declare type MutationCreateListingMarketPlaceActionArgs = {
    data: CreateListingMarketPlaceActionInput;
};
export declare type MutationCreateMarketPlaceActionArgs = {
    data: CreateMarketPlaceActionsInput;
};
export declare type MutationCreateTransactionMarketPlaceActionArgs = {
    data: CreateTransactionMarketPlaceActionInput;
};
export declare type MutationCreateUpcomingProjectArgs = {
    data: CreateUpcomingProjectInstanceInput;
};
export declare type MutationUpdateBidMarketPlaceActionArgs = {
    data: UpdateBidMarketPlaceActionInput;
};
export declare type MutationUpdateListingMarketPlaceActionArgs = {
    data: UpdateListingMarketPlaceActionInput;
};
export declare type MutationUpdateUpcomingProjectArgs = {
    data: UpdateUpcomingProjectInput;
};
export declare enum NonMarketPlaceActionEnum {
    Burn = "BURN",
    DepositStake = "DEPOSIT_STAKE",
    Mint = "MINT",
    Other = "OTHER",
    Stake = "STAKE",
    Transfer = "TRANSFER",
    Unstake = "UNSTAKE",
    UpdateMetadata = "UPDATE_METADATA",
    WithdrawStake = "WITHDRAW_STAKE"
}
export declare type NonMarketPlaceActions = {
    __typename?: 'NonMarketPlaceActions';
    amount?: Maybe<Scalars['Float']>;
    bank_id?: Maybe<Scalars['String']>;
    block_number?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    collection_id?: Maybe<Scalars['String']>;
    created_at?: Maybe<Scalars['DateTime']>;
    currency?: Maybe<Scalars['String']>;
    decimal?: Maybe<Scalars['Float']>;
    destination_address?: Maybe<Scalars['String']>;
    destination_token_account?: Maybe<Scalars['String']>;
    farm_id?: Maybe<Scalars['String']>;
    metadata?: Maybe<Scalars['JSON']>;
    new_authority?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['Float']>;
    program_id?: Maybe<Scalars['String']>;
    signature?: Maybe<Scalars['String']>;
    source_address?: Maybe<Scalars['String']>;
    source_token_account?: Maybe<Scalars['String']>;
    token_address?: Maybe<Scalars['String']>;
    token_name?: Maybe<Scalars['String']>;
    type?: Maybe<NonMarketPlaceActionEnum>;
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare type OrderConfig = {
    field_name: Scalars['String'];
    sort_order: SortOrderEnum;
};
export declare type OwnerDist = {
    __typename?: 'OwnerDist';
    listed: Scalars['Float'];
    owned: Scalars['Float'];
    owner: Scalars['String'];
    total_value?: Maybe<Scalars['Float']>;
    twitter?: Maybe<Scalars['String']>;
};
export declare type PaginationConfig = {
    page_number?: InputMaybe<Scalars['Float']>;
    page_size?: InputMaybe<Scalars['Float']>;
    progressive_load?: InputMaybe<Scalars['Boolean']>;
};
export declare type PaginationInfoResponseType = {
    __typename?: 'PaginationInfoResponseType';
    current_page_number: Scalars['Float'];
    current_page_size: Scalars['Float'];
    has_next_page: Scalars['Boolean'];
    total_page_number?: Maybe<Scalars['Float']>;
};
export declare type Project = {
    __typename?: 'Project';
    candy_machine_id?: Maybe<Scalars['String']>;
    candy_machine_ids?: Maybe<Array<Scalars['String']>>;
    created_at?: Maybe<Scalars['DateTime']>;
    description?: Maybe<Scalars['String']>;
    discord?: Maybe<Scalars['String']>;
    display_name: Scalars['String'];
    first_creator?: Maybe<Scalars['String']>;
    img_url?: Maybe<Scalars['String']>;
    is_attribute_stats_enabled?: Maybe<Scalars['Boolean']>;
    is_minting?: Maybe<Scalars['Boolean']>;
    is_verified?: Maybe<Scalars['Boolean']>;
    launch_date?: Maybe<Scalars['DateTime']>;
    launch_timestamp?: Maybe<Scalars['String']>;
    lmnft?: Maybe<Scalars['String']>;
    mcc_id?: Maybe<Scalars['String']>;
    me_slug?: Maybe<Scalars['String']>;
    notifi_id?: Maybe<Scalars['String']>;
    project_attributes?: Maybe<Array<ProjectAttribute>>;
    project_id: Scalars['String'];
    project_slug?: Maybe<Scalars['String']>;
    protocol?: Maybe<ProtocolEnum>;
    rarities?: Maybe<Scalars['JSON']>;
    requires_categorization?: Maybe<Scalars['Boolean']>;
    supply?: Maybe<Scalars['Float']>;
    tags?: Maybe<Array<ProjectTag>>;
    twitter?: Maybe<Scalars['String']>;
    updated_at?: Maybe<Scalars['DateTime']>;
    website?: Maybe<Scalars['String']>;
};
export declare type ProjectAndCollectionBid = {
    __typename?: 'ProjectAndCollectionBid';
    amount?: Maybe<Scalars['Float']>;
    block_number?: Maybe<Scalars['Float']>;
    block_timestamp?: Maybe<Scalars['Float']>;
    buyer_address?: Maybe<Scalars['String']>;
    buyer_referral_address?: Maybe<Scalars['String']>;
    buyer_referral_fee?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    currency?: Maybe<Scalars['String']>;
    currency_price?: Maybe<Scalars['Float']>;
    decimal?: Maybe<Scalars['Float']>;
    display_name?: Maybe<Scalars['String']>;
    expiration?: Maybe<Scalars['Float']>;
    fee?: Maybe<Scalars['Float']>;
    fee_address?: Maybe<Scalars['String']>;
    identifier_index?: Maybe<Scalars['Float']>;
    identifier_key?: Maybe<Scalars['String']>;
    identifier_type: CollectionIdentifierTypeEnum;
    img_url?: Maybe<Scalars['String']>;
    instance_id?: Maybe<Scalars['String']>;
    instruction_index?: Maybe<Scalars['Float']>;
    metadata?: Maybe<Scalars['JSON']>;
    price?: Maybe<Scalars['Float']>;
    program_id?: Maybe<Scalars['String']>;
    project_id?: Maybe<Scalars['String']>;
    project_slug?: Maybe<Scalars['String']>;
    seller_address?: Maybe<Scalars['String']>;
    seller_referral_address?: Maybe<Scalars['String']>;
    seller_referral_fee?: Maybe<Scalars['Float']>;
    signature?: Maybe<Scalars['String']>;
    trade_state?: Maybe<Scalars['String']>;
    type?: Maybe<CollectionBidActionEnum>;
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare type ProjectAttribute = {
    __typename?: 'ProjectAttribute';
    counts?: Maybe<Scalars['JSON']>;
    floor_prices?: Maybe<Scalars['JSON']>;
    name: Scalars['String'];
    type: AttributeTypeEnum;
    values: Array<Scalars['String']>;
};
export declare type ProjectIdWithAttributes = {
    attributes?: InputMaybe<Array<Scalars['JSON']>>;
    project_id: Scalars['String'];
};
export declare type ProjectStat = {
    __typename?: 'ProjectStat';
    average_price?: Maybe<Scalars['Float']>;
    average_price_1day_change?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    discord_members?: Maybe<Scalars['Float']>;
    floor_price?: Maybe<Scalars['Float']>;
    floor_price_1day_change?: Maybe<Scalars['Float']>;
    market_cap?: Maybe<Scalars['Float']>;
    max_price?: Maybe<Scalars['Float']>;
    num_of_token_holders?: Maybe<Scalars['Float']>;
    num_of_token_listed?: Maybe<Scalars['Float']>;
    percentage_of_token_listed?: Maybe<Scalars['Float']>;
    project?: Maybe<Project>;
    project_id: Scalars['String'];
    rank?: Maybe<Scalars['Float']>;
    supply?: Maybe<Scalars['Float']>;
    twitter_followers?: Maybe<Scalars['Float']>;
    updated_at?: Maybe<Scalars['DateTime']>;
    volume_1day?: Maybe<Scalars['Float']>;
    volume_1day_change?: Maybe<Scalars['Float']>;
    volume_1hr?: Maybe<Scalars['Float']>;
    volume_7day?: Maybe<Scalars['Float']>;
};
export declare type ProjectStatHist = {
    __typename?: 'ProjectStatHist';
    created_at?: Maybe<Scalars['DateTime']>;
    discord_members?: Maybe<Scalars['Float']>;
    floor_price?: Maybe<Scalars['Float']>;
    max_price?: Maybe<Scalars['Float']>;
    num_of_sales?: Maybe<Scalars['Float']>;
    num_of_token_holders?: Maybe<Scalars['Float']>;
    num_of_token_listed?: Maybe<Scalars['Float']>;
    project_id: Scalars['String'];
    supply?: Maybe<Scalars['Float']>;
    timestamp: Scalars['Float'];
    twitter_followers?: Maybe<Scalars['Float']>;
    updated_at?: Maybe<Scalars['DateTime']>;
    volume?: Maybe<Scalars['Float']>;
    volume_double?: Maybe<Scalars['Float']>;
    volume_usd?: Maybe<Scalars['Float']>;
    volume_usd_double?: Maybe<Scalars['Float']>;
};
export declare type ProjectTag = {
    __typename?: 'ProjectTag';
    created_at?: Maybe<Scalars['DateTime']>;
    project_id?: Maybe<Scalars['String']>;
    tag: Scalars['String'];
    updated_at?: Maybe<Scalars['DateTime']>;
};
export declare enum ProtocolEnum {
    Cardano = "CARDANO",
    Ethereum = "ETHEREUM",
    Solana = "SOLANA"
}
export declare type Query = {
    __typename?: 'Query';
    acceptBidTx: MarketPlaceTxOutput;
    confirmBuyTx: MarketPlaceTxConfirmation;
    createBidTx: MarketPlaceTxOutput;
    createBuyTx: MarketPlaceTxOutput;
    createCancelBidTx: MarketPlaceTxOutput;
    createDelistTx: MarketPlaceTxOutput;
    createListTx: MarketPlaceTxOutput;
    createWithdrawEscrowTx: MarketPlaceTxOutput;
    getCollectionBidConfig: GetCollectionBidConfigResponse;
    getCollectionBidsForProject: GetCollectionBidsResponse;
    getCollectionBidsForProjectAndUser: GetCollectionBidsResponse;
    getCollectionBidsForUser: GetProjectAndCollectionBidsResponse;
    getCollectionDistribution: GetCollectionDistOutput;
    getFloorPriceDistribution: GetFloorPriceDistOutput;
    getMarketPlaceActionsByToken: Array<GetMarketPlaceActionsOutput>;
    getMarketPlaceSnapshots: GetMarketPlaceSnapshotsResponse;
    getMarketPlaceStatus: GetMarketPlaceStatusResponse;
    getNonMpaProjectHistory: GetMarketPlaceSnapshotsResponse;
    getNonMpaUserHistory: GetMarketPlaceSnapshotsResponse;
    getOverallProjectStats: GetOverallProjectStatOutput;
    getOverallWalletStats: GetOverallWalletStatOutput;
    getOwnersDistribution: GetOwnerDistOutput;
    getProjectHistory: GetMarketPlaceSnapshotsResponse;
    getProjectStatByName: GetProjectStatsOutput;
    getProjectStatCount: GetProjectStatCount;
    getProjectStatHist: GetProjectStatHistOutput;
    getProjectStats: GetProjectStatsOutput;
    getTokenState: Array<GetMarketPlaceStateResponse>;
    getUpcomingProjectsRaw: GetUpcomingProjectsResponse;
    getUserBids: GetMarketPlaceSnapshotsResponse;
    getUserHistory: GetMarketPlaceSnapshotsResponse;
    getUserListings: GetMarketPlaceSnapshotsResponse;
    getWalletStats: GetWalletStatsOutput;
    getWalletStatsHist: GetWalletStatsHistOutput;
    validateAndConfirmSignature: ValidateAndConfirmSignatureOutput;
};
export declare type QueryAcceptBidTxArgs = {
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_broker: Scalars['String'];
    seller_broker_basis_points?: InputMaybe<Scalars['Float']>;
    token_address: Scalars['String'];
};
export declare type QueryConfirmBuyTxArgs = {
    data?: InputMaybe<Array<Scalars['Float']>>;
    hex_data?: InputMaybe<Scalars['String']>;
    metadata: Scalars['JSON'];
};
export declare type QueryCreateBidTxArgs = {
    buyer_address: Scalars['String'];
    buyer_broker: Scalars['String'];
    buyer_broker_basis_points?: InputMaybe<Scalars['Float']>;
    price: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type QueryCreateBuyTxArgs = {
    buyer_address: Scalars['String'];
    buyer_broker: Scalars['String'];
    buyer_broker_basis_points?: InputMaybe<Scalars['Float']>;
    ignore_funds_check?: InputMaybe<Scalars['Boolean']>;
    price: Scalars['Float'];
    token_address: Scalars['String'];
    unverified?: InputMaybe<Scalars['Boolean']>;
    validate?: InputMaybe<Scalars['Boolean']>;
};
export declare type QueryCreateCancelBidTxArgs = {
    buyer_address: Scalars['String'];
    token_address: Scalars['String'];
};
export declare type QueryCreateDelistTxArgs = {
    seller_address: Scalars['String'];
    token_address: Scalars['String'];
};
export declare type QueryCreateListTxArgs = {
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_broker: Scalars['String'];
    seller_broker_basis_points?: InputMaybe<Scalars['Float']>;
    token_address: Scalars['String'];
};
export declare type QueryCreateWithdrawEscrowTxArgs = {
    amount: Scalars['Float'];
    user_address: Scalars['String'];
};
export declare type QueryGetCollectionBidConfigArgs = {
    project_id: Scalars['String'];
};
export declare type QueryGetCollectionBidsForProjectArgs = {
    project_id: Scalars['String'];
};
export declare type QueryGetCollectionBidsForProjectAndUserArgs = {
    buyer_address: Scalars['String'];
    project_id: Scalars['String'];
};
export declare type QueryGetCollectionBidsForUserArgs = {
    buyer_address: Scalars['String'];
};
export declare type QueryGetCollectionDistributionArgs = {
    conditions?: InputMaybe<GetCollectionDistCondition>;
};
export declare type QueryGetFloorPriceDistributionArgs = {
    conditions?: InputMaybe<GetFloorPriceDistCondition>;
};
export declare type QueryGetMarketPlaceActionsByTokenArgs = {
    condition: GetMarketPlaceActionsByTokenAddressCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetMarketPlaceSnapshotsArgs = {
    condition?: InputMaybe<GetMarketPlaceSnapshotCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetNonMpaProjectHistoryArgs = {
    condition: GetNonMarketPlaceActionsByProjectCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<MpaPaginationConfig>;
};
export declare type QueryGetNonMpaUserHistoryArgs = {
    condition: GetNonMarketPlaceActionsByUserCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<MpaPaginationConfig>;
};
export declare type QueryGetOverallProjectStatsArgs = {
    tag?: InputMaybe<Scalars['String']>;
};
export declare type QueryGetOwnersDistributionArgs = {
    conditions?: InputMaybe<GetOwnersDistCondition>;
};
export declare type QueryGetProjectHistoryArgs = {
    condition: GetMarketPlaceActionsByProjectsCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<MpaPaginationConfig>;
};
export declare type QueryGetProjectStatByNameArgs = {
    condition: GetProjectStatByNameCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetProjectStatHistArgs = {
    conditions: GetProjectStatHistCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetProjectStatsArgs = {
    conditions?: InputMaybe<GetProjectStatsCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetTokenStateArgs = {
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetUpcomingProjectsRawArgs = {
    conditions?: InputMaybe<Array<GetUpcomingProjectsCondition>>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetUserBidsArgs = {
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetUserHistoryArgs = {
    condition: GetMarketPlaceActionsByUserCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<MpaPaginationConfig>;
};
export declare type QueryGetUserListingsArgs = {
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetWalletStatsArgs = {
    condition?: InputMaybe<GetWalletStatsCondition>;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryGetWalletStatsHistArgs = {
    condition: GetWalletStatsHistCondition;
    order_by?: InputMaybe<Array<OrderConfig>>;
    pagination_info?: InputMaybe<PaginationConfig>;
};
export declare type QueryValidateAndConfirmSignatureArgs = {
    signature: Scalars['String'];
};
export declare enum SortOrderEnum {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type StringInputArg = {
    operation?: InputMaybe<StringInputOperationEnum>;
    value: Scalars['String'];
};
export declare enum StringInputOperationEnum {
    Exact = "EXACT",
    Fuzzy = "FUZZY"
}
export declare type SupplyInput = {
    operation: Scalars['String'];
    order_by?: InputMaybe<Scalars['String']>;
    supply: Scalars['Float'];
};
export declare enum TimePeriodEnum {
    All = "ALL",
    OneDay = "ONE_DAY"
}
export declare type UpcomingProject = {
    __typename?: 'UpcomingProject';
    calendar_event_id?: Maybe<Scalars['String']>;
    candy_machine_ids?: Maybe<Array<Scalars['String']>>;
    created_at: Scalars['DateTime'];
    crm_priority?: Maybe<CrmPriorityEnum>;
    description?: Maybe<Scalars['String']>;
    discord?: Maybe<Scalars['String']>;
    discord_members?: Maybe<Scalars['Float']>;
    display_name?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    img_url?: Maybe<Scalars['String']>;
    is_affiliate: Scalars['Boolean'];
    is_featured: Scalars['Boolean'];
    is_moonshot: Scalars['Boolean'];
    launch_date?: Maybe<Scalars['Date']>;
    launch_timestamp?: Maybe<Scalars['String']>;
    launchpad?: Maybe<Scalars['String']>;
    launchpad_contact_date?: Maybe<Scalars['Date']>;
    launchpad_stage?: Maybe<LeadStateEnum>;
    marketplace_contact_date?: Maybe<Scalars['Date']>;
    marketplace_stage?: Maybe<LeadStateEnum>;
    mint_site?: Maybe<Scalars['String']>;
    notes?: Maybe<Scalars['String']>;
    point_person?: Maybe<Scalars['String']>;
    prediction?: Maybe<Scalars['Float']>;
    price?: Maybe<Scalars['String']>;
    priority?: Maybe<Scalars['Float']>;
    priority_assign_date?: Maybe<Scalars['Date']>;
    project_id?: Maybe<Scalars['String']>;
    project_name: Scalars['String'];
    protocol: ProtocolEnum;
    source?: Maybe<Scalars['String']>;
    supply?: Maybe<Scalars['String']>;
    telegram?: Maybe<Scalars['String']>;
    twitter?: Maybe<Scalars['String']>;
    twitter_followers?: Maybe<Scalars['Float']>;
    updated_at: Scalars['DateTime'];
    website?: Maybe<Scalars['String']>;
};
export declare type UpcomingProjectFindyByInput = {
    project_name: Scalars['String'];
};
export declare type UpdateBidMarketPlaceActionInput = {
    buyer_address: Scalars['String'];
    buyer_referral_address: Scalars['String'];
    buyer_referral_fee: Scalars['Float'];
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type UpdateListingMarketPlaceActionInput = {
    marketplace_fee_address: Scalars['String'];
    marketplace_program_id: Scalars['String'];
    price: Scalars['Float'];
    seller_address: Scalars['String'];
    seller_referral_address: Scalars['String'];
    seller_referral_fee: Scalars['Float'];
    signature: Scalars['String'];
    slot: Scalars['Float'];
    token_address: Scalars['String'];
};
export declare type UpdateUpcomingProjectInput = {
    find_by: UpcomingProjectFindyByInput;
    input_values: UpdateUpcomingProjectInputValues;
};
export declare type UpdateUpcomingProjectInputValues = {
    description?: InputMaybe<Scalars['String']>;
    discord?: InputMaybe<Scalars['String']>;
    display_name?: InputMaybe<Scalars['String']>;
    has_ended?: InputMaybe<Scalars['Boolean']>;
    img_url?: InputMaybe<Scalars['String']>;
    launch_date?: InputMaybe<Scalars['Date']>;
    launch_timestamp?: InputMaybe<Scalars['String']>;
    mint_site?: InputMaybe<Scalars['String']>;
    price?: InputMaybe<Scalars['String']>;
    supply?: InputMaybe<Scalars['String']>;
    twitter?: InputMaybe<Scalars['String']>;
    website?: InputMaybe<Scalars['String']>;
};
export declare type UserTimestamp = {
    locale?: InputMaybe<Scalars['String']>;
    operation?: InputMaybe<Scalars['String']>;
    timestamp: Scalars['Float'];
    timezone?: InputMaybe<Scalars['String']>;
};
export declare type WalletStat = {
    __typename?: 'WalletStat';
    address: Scalars['String'];
    bids_made_amount?: Maybe<Scalars['Float']>;
    bids_made_amount_1day?: Maybe<Scalars['Float']>;
    created_at?: Maybe<Scalars['DateTime']>;
    listed_nfts?: Maybe<Scalars['Float']>;
    max_purchase?: Maybe<Scalars['Float']>;
    max_purchase_1day?: Maybe<Scalars['Float']>;
    max_purchase_item?: Maybe<Scalars['JSON']>;
    max_purchase_item_1day?: Maybe<Scalars['JSON']>;
    max_sale?: Maybe<Scalars['Float']>;
    max_sale_1day?: Maybe<Scalars['Float']>;
    max_sale_item?: Maybe<Scalars['JSON']>;
    max_sale_item_1day?: Maybe<Scalars['JSON']>;
    minted_amount?: Maybe<Scalars['Float']>;
    minted_amount_1day?: Maybe<Scalars['Float']>;
    num_bids?: Maybe<Scalars['Float']>;
    num_bids_1day?: Maybe<Scalars['Float']>;
    num_bought?: Maybe<Scalars['Float']>;
    num_bought_1day?: Maybe<Scalars['Float']>;
    num_minted?: Maybe<Scalars['Float']>;
    num_minted_1day?: Maybe<Scalars['Float']>;
    num_sold?: Maybe<Scalars['Float']>;
    num_sold_1day?: Maybe<Scalars['Float']>;
    owned_nfts?: Maybe<Scalars['Float']>;
    portfolio_value?: Maybe<Scalars['Float']>;
    rank?: Maybe<Scalars['Float']>;
    rank_1day?: Maybe<Scalars['Float']>;
    rank_1day_percentile?: Maybe<Scalars['Float']>;
    rank_percentile?: Maybe<Scalars['Float']>;
    sol_name?: Maybe<Scalars['String']>;
    twitter?: Maybe<Scalars['String']>;
    updated_at?: Maybe<Scalars['DateTime']>;
    volume_bought?: Maybe<Scalars['Float']>;
    volume_bought_1day?: Maybe<Scalars['Float']>;
    volume_sold?: Maybe<Scalars['Float']>;
    volume_sold_1day?: Maybe<Scalars['Float']>;
    wallet_score?: Maybe<Scalars['Float']>;
    wallet_score_1day?: Maybe<Scalars['Float']>;
    wallet_stat_timestamp?: Maybe<Scalars['Float']>;
};
export declare type WalletStatHist = {
    __typename?: 'WalletStatHist';
    address: Scalars['String'];
    created_at: Scalars['DateTime'];
    owned_nfts?: Maybe<Scalars['Float']>;
    portfolio_value?: Maybe<Scalars['Float']>;
    timestamp: Scalars['Float'];
    updated_at: Scalars['DateTime'];
};
export declare type ValidateAndConfirmSignatureOutput = {
    __typename?: 'validateAndConfirmSignatureOutput';
    success: Scalars['Boolean'];
};
export declare type GetBuyTxQueryVariables = Exact<{
    buyerAddress: Scalars['String'];
    price: Scalars['Float'];
    tokenAddress: Scalars['String'];
    buyerBroker: Scalars['String'];
    buyerBrokerBasisPoints?: InputMaybe<Scalars['Float']>;
    unverified?: InputMaybe<Scalars['Boolean']>;
    ignoreFundCheck?: InputMaybe<Scalars['Boolean']>;
}>;
export declare type GetBuyTxQuery = {
    __typename?: 'Query';
    createBuyTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        stdBuffer?: Array<number> | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type SendBuyTxQueryVariables = Exact<{
    data?: InputMaybe<Array<Scalars['Float']> | Scalars['Float']>;
    hexData?: InputMaybe<Scalars['String']>;
    metadata: Scalars['JSON'];
}>;
export declare type SendBuyTxQuery = {
    __typename?: 'Query';
    confirmBuyTx: {
        __typename?: 'MarketPlaceTxConfirmation';
        tx_id?: string | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetListTxQueryVariables = Exact<{
    sellerAddress: Scalars['String'];
    price: Scalars['Float'];
    tokenAddress: Scalars['String'];
    sellerBroker: Scalars['String'];
    sellerBrokerBasisPoints?: InputMaybe<Scalars['Float']>;
}>;
export declare type GetListTxQuery = {
    __typename?: 'Query';
    createListTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetBidTxQueryVariables = Exact<{
    buyerAddress: Scalars['String'];
    price: Scalars['Float'];
    tokenAddress: Scalars['String'];
    buyerBroker: Scalars['String'];
    buyerBrokerBasisPoints?: InputMaybe<Scalars['Float']>;
}>;
export declare type GetBidTxQuery = {
    __typename?: 'Query';
    createBidTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetAcceptBidTxQueryVariables = Exact<{
    sellerAddress: Scalars['String'];
    price: Scalars['Float'];
    tokenAddress: Scalars['String'];
    sellerBroker: Scalars['String'];
    sellerBrokerBasisPoints?: InputMaybe<Scalars['Float']>;
}>;
export declare type GetAcceptBidTxQuery = {
    __typename?: 'Query';
    acceptBidTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetCancelBidTxQueryVariables = Exact<{
    buyerAddress: Scalars['String'];
    tokenAddress: Scalars['String'];
}>;
export declare type GetCancelBidTxQuery = {
    __typename?: 'Query';
    createCancelBidTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetDelistTxQueryVariables = Exact<{
    sellerAddress: Scalars['String'];
    tokenAddress: Scalars['String'];
}>;
export declare type GetDelistTxQuery = {
    __typename?: 'Query';
    createDelistTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetWithdrawEscrowTxQueryVariables = Exact<{
    userAddress: Scalars['String'];
    amount: Scalars['Float'];
}>;
export declare type GetWithdrawEscrowTxQuery = {
    __typename?: 'Query';
    createWithdrawEscrowTx: {
        __typename?: 'MarketPlaceTxOutput';
        data?: Array<number> | null;
        is_required_signers_on?: boolean | null;
        metadata?: any | null;
        error?: {
            __typename?: 'MarketPlaceTxOutputError';
            error_type?: MarketPlaceTxErrorEnum | null;
            message?: string | null;
            metadata?: any | null;
        } | null;
    };
};
export declare type GetTokenHistoryQueryVariables = Exact<{
    condition: GetMarketPlaceActionsByTokenAddressCondition;
    paginationInfo?: InputMaybe<PaginationConfig>;
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
}>;
export declare type GetTokenHistoryQuery = {
    __typename?: 'Query';
    getMarketPlaceActionsByToken: Array<{
        __typename?: 'GetMarketPlaceActionsOutput';
        token_address: string;
        market_place_actions: Array<{
            __typename?: 'MarketPlaceActions';
            block_timestamp?: number | null;
            escrow_address?: string | null;
            signature?: string | null;
            seller_address?: string | null;
            buyer_address?: string | null;
            type?: MarketPlaceActionEnum | null;
            marketplace_program_id?: string | null;
            marketplace_instance_id?: string | null;
            fee?: number | null;
            amount?: number | null;
            seller_referral_fee?: number | null;
            seller_referral_address?: string | null;
            buyer_referral_address?: string | null;
            buyer_referral_fee?: number | null;
            metadata?: any | null;
            price?: number | null;
        }>;
    }>;
};
export declare type GetUserHistoryQueryVariables = Exact<{
    condition: GetMarketPlaceActionsByUserCondition;
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    paginationInfo?: InputMaybe<MpaPaginationConfig>;
}>;
export declare type GetUserHistoryQuery = {
    __typename?: 'Query';
    getUserHistory: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            project_name?: string | null;
            name?: string | null;
            token_address: string;
            meta_data_img?: string | null;
            full_img?: string | null;
            is_project_verified?: boolean | null;
            market_place_state?: {
                __typename?: 'MarketPlaceState';
                block_timestamp?: number | null;
                escrow_address?: string | null;
                signature?: string | null;
                seller_address?: string | null;
                buyer_address?: string | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                fee?: number | null;
                amount?: number | null;
                seller_referral_fee?: number | null;
                seller_referral_address?: string | null;
                buyer_referral_address?: string | null;
                buyer_referral_fee?: number | null;
                metadata?: any | null;
                price?: number | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
            total_page_number?: number | null;
        };
    };
};
export declare type GetProjectHistoryQueryVariables = Exact<{
    condition: GetMarketPlaceActionsByProjectsCondition;
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    paginationInfo?: InputMaybe<MpaPaginationConfig>;
}>;
export declare type GetProjectHistoryQuery = {
    __typename?: 'Query';
    getProjectHistory: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            name?: string | null;
            token_address: string;
            meta_data_img?: string | null;
            full_img?: string | null;
            rank_est?: number | null;
            market_place_state?: {
                __typename?: 'MarketPlaceState';
                block_timestamp?: number | null;
                escrow_address?: string | null;
                signature?: string | null;
                seller_address?: string | null;
                buyer_address?: string | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                fee?: number | null;
                amount?: number | null;
                seller_referral_fee?: number | null;
                seller_referral_address?: string | null;
                buyer_referral_address?: string | null;
                buyer_referral_fee?: number | null;
                metadata?: any | null;
                price?: number | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
            total_page_number?: number | null;
        };
    };
};
export declare type GetNonMpaProjectHistoryQueryVariables = Exact<{
    condition: GetNonMarketPlaceActionsByProjectCondition;
    paginationInfo?: InputMaybe<MpaPaginationConfig>;
}>;
export declare type GetNonMpaProjectHistoryQuery = {
    __typename?: 'Query';
    getNonMpaProjectHistory: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            token_address: string;
            project_id: string;
            project_name?: string | null;
            name?: string | null;
            full_img?: string | null;
            rank_est?: number | null;
            meta_data_img?: string | null;
            non_market_place_state?: {
                __typename?: 'NonMarketPlaceActions';
                token_address?: string | null;
                signature?: string | null;
                source_address?: string | null;
                destination_address?: string | null;
                program_id?: string | null;
                collection_id?: string | null;
                new_authority?: string | null;
                price?: number | null;
                type?: NonMarketPlaceActionEnum | null;
                currency?: string | null;
                amount?: number | null;
                decimal?: number | null;
                destination_token_account?: string | null;
                source_token_account?: string | null;
                metadata?: any | null;
                block_timestamp?: number | null;
                block_number?: number | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
        };
    };
};
export declare type GetNonMpaUserHistoryQueryVariables = Exact<{
    condition: GetNonMarketPlaceActionsByUserCondition;
    paginationInfo?: InputMaybe<MpaPaginationConfig>;
}>;
export declare type GetNonMpaUserHistoryQuery = {
    __typename?: 'Query';
    getNonMpaUserHistory: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            token_address: string;
            project_id: string;
            project_name?: string | null;
            name?: string | null;
            full_img?: string | null;
            rank_est?: number | null;
            meta_data_img?: string | null;
            is_project_verified?: boolean | null;
            non_market_place_state?: {
                __typename?: 'NonMarketPlaceActions';
                token_address?: string | null;
                signature?: string | null;
                source_address?: string | null;
                destination_address?: string | null;
                program_id?: string | null;
                collection_id?: string | null;
                new_authority?: string | null;
                price?: number | null;
                type?: NonMarketPlaceActionEnum | null;
                currency?: string | null;
                amount?: number | null;
                decimal?: number | null;
                destination_token_account?: string | null;
                source_token_account?: string | null;
                metadata?: any | null;
                block_timestamp?: number | null;
                block_number?: number | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
        };
    };
};
export declare type GetMarketplaceSnapshotsQueryVariables = Exact<{
    condition?: InputMaybe<GetMarketPlaceSnapshotCondition>;
    pagination_info?: InputMaybe<PaginationConfig>;
    order_by?: InputMaybe<Array<OrderConfig> | OrderConfig>;
}>;
export declare type GetMarketplaceSnapshotsQuery = {
    __typename?: 'Query';
    getMarketPlaceSnapshots: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            token_address: string;
            project_id: string;
            name?: string | null;
            rank_est?: number | null;
            moonrank?: number | null;
            howrare_rank?: number | null;
            supply?: number | null;
            full_img?: string | null;
            meta_data_img?: string | null;
            meta_data_uri?: string | null;
            attributes?: any | null;
            floor_price?: number | null;
            project_name?: string | null;
            project_image?: string | null;
            project_slug?: string | null;
            project_description?: string | null;
            is_project_verified?: boolean | null;
            created_at?: any | null;
            project_attributes?: Array<{
                __typename?: 'ProjectAttribute';
                name: string;
                counts?: any | null;
                type: AttributeTypeEnum;
                values: Array<string>;
            }> | null;
            lowest_listing_mpa?: {
                __typename?: 'MarketPlaceActionResponse';
                user_address?: string | null;
                price?: number | null;
                marketplace_program_id?: string | null;
                type?: MarketPlaceActionEnum | null;
                signature?: string | null;
                amount?: number | null;
                broker_referral_address?: string | null;
                block_timestamp?: number | null;
                broker_referral_fee?: number | null;
                escrow_address?: string | null;
                fee?: number | null;
                marketplace_fee_address?: string | null;
                marketplace_instance_id?: string | null;
                metadata?: any | null;
            } | null;
            highest_bid_mpa?: {
                __typename?: 'MarketPlaceActionResponse';
                marketplace_fee_address?: string | null;
                fee?: number | null;
                escrow_address?: string | null;
                broker_referral_fee?: number | null;
                broker_referral_address?: string | null;
                block_timestamp?: number | null;
                signature?: string | null;
                amount?: number | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                price?: number | null;
                user_address?: string | null;
                metadata?: any | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
            total_page_number?: number | null;
        };
    };
};
export declare type GetUserBidsQueryVariables = Exact<{
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    order_by?: InputMaybe<Array<OrderConfig> | OrderConfig>;
}>;
export declare type GetUserBidsQuery = {
    __typename?: 'Query';
    getUserBids: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            name?: string | null;
            token_address: string;
            project_name?: string | null;
            project_id: string;
            full_img?: string | null;
            meta_data_img?: string | null;
            floor_price?: number | null;
            rank_est?: number | null;
            moonrank?: number | null;
            howrare_rank?: number | null;
            market_place_state?: {
                __typename?: 'MarketPlaceState';
                block_timestamp?: number | null;
                escrow_address?: string | null;
                signature?: string | null;
                seller_address?: string | null;
                buyer_address?: string | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                fee?: number | null;
                amount?: number | null;
                seller_referral_fee?: number | null;
                seller_referral_address?: string | null;
                buyer_referral_address?: string | null;
                buyer_referral_fee?: number | null;
                metadata?: any | null;
                price?: number | null;
            } | null;
        }> | null;
    };
};
export declare type GetUserListingsQueryVariables = Exact<{
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
}>;
export declare type GetUserListingsQuery = {
    __typename?: 'Query';
    getUserListings: {
        __typename?: 'GetMarketPlaceSnapshotsResponse';
        market_place_snapshots?: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            token_address: string;
            name?: string | null;
            full_img?: string | null;
            meta_data_img?: string | null;
            project_name?: string | null;
            project_id: string;
            rank_est?: number | null;
            moonrank?: number | null;
            howrare_rank?: number | null;
            market_place_state?: {
                __typename?: 'MarketPlaceState';
                block_timestamp?: number | null;
                escrow_address?: string | null;
                signature?: string | null;
                seller_address?: string | null;
                buyer_address?: string | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                fee?: number | null;
                amount?: number | null;
                seller_referral_fee?: number | null;
                seller_referral_address?: string | null;
                buyer_referral_address?: string | null;
                buyer_referral_fee?: number | null;
                metadata?: any | null;
                price?: number | null;
            } | null;
        }> | null;
    };
};
export declare type GetTokenStateQueryVariables = Exact<{
    condition?: InputMaybe<GetMarketPlaceStateCondition>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
}>;
export declare type GetTokenStateQuery = {
    __typename?: 'Query';
    getTokenState: Array<{
        __typename?: 'GetMarketPlaceStateResponse';
        token_address: string;
        market_place_states: Array<{
            __typename?: 'MarketPlaceSnapshotResponse';
            token_address: string;
            project_id: string;
            name?: string | null;
            rank_est?: number | null;
            full_img?: string | null;
            meta_data_img?: string | null;
            attributes?: any | null;
            moonrank?: number | null;
            howrare_rank?: number | null;
            market_place_state?: {
                __typename?: 'MarketPlaceState';
                block_timestamp?: number | null;
                escrow_address?: string | null;
                signature?: string | null;
                seller_address?: string | null;
                buyer_address?: string | null;
                type?: MarketPlaceActionEnum | null;
                marketplace_program_id?: string | null;
                marketplace_instance_id?: string | null;
                fee?: number | null;
                amount?: number | null;
                seller_referral_fee?: number | null;
                seller_referral_address?: string | null;
                buyer_referral_address?: string | null;
                buyer_referral_fee?: number | null;
                metadata?: any | null;
                price?: number | null;
            } | null;
        }>;
    }>;
};
export declare type GetMarketplaceStatusQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type GetMarketplaceStatusQuery = {
    __typename?: 'Query';
    getMarketPlaceStatus: {
        __typename?: 'GetMarketPlaceStatusResponse';
        mps: Array<{
            __typename?: 'MarketPlaceStatus';
            display_name: string;
            item_path?: string | null;
            website?: string | null;
            is_bidding_enabled: boolean;
            is_buying_enabled: boolean;
            is_delisting_enabled: boolean;
            is_listing_enabled: boolean;
            marketplace_program_id: string;
            marketplace_instance_id?: string | null;
        }>;
    };
};
export declare type GetProjectStatsQueryVariables = Exact<{
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    conditions?: InputMaybe<GetProjectStatsCondition>;
}>;
export declare type GetProjectStatsQuery = {
    __typename?: 'Query';
    getProjectStats: {
        __typename?: 'GetProjectStatsOutput';
        project_stats?: Array<{
            __typename?: 'ProjectStat';
            project_id: string;
            market_cap?: number | null;
            volume_7day?: number | null;
            volume_1day_change?: number | null;
            floor_price?: number | null;
            floor_price_1day_change?: number | null;
            average_price?: number | null;
            average_price_1day_change?: number | null;
            max_price?: number | null;
            twitter_followers?: number | null;
            num_of_token_listed?: number | null;
            num_of_token_holders?: number | null;
            percentage_of_token_listed?: number | null;
            volume_1day?: number | null;
            volume_1hr?: number | null;
            project?: {
                __typename?: 'Project';
                project_id: string;
                supply?: number | null;
                website?: string | null;
                twitter?: string | null;
                discord?: string | null;
                img_url?: string | null;
                is_verified?: boolean | null;
                display_name: string;
                project_slug?: string | null;
                me_slug?: string | null;
                description?: string | null;
                mcc_id?: string | null;
                first_creator?: string | null;
                tags?: Array<{
                    __typename?: 'ProjectTag';
                    tag: string;
                }> | null;
                project_attributes?: Array<{
                    __typename?: 'ProjectAttribute';
                    name: string;
                    type: AttributeTypeEnum;
                    values: Array<string>;
                    counts?: any | null;
                    floor_prices?: any | null;
                }> | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
            total_page_number?: number | null;
        };
    };
};
export declare type GetProjectStatHistoryQueryVariables = Exact<{
    paginationInfo?: InputMaybe<PaginationConfig>;
    conditions: GetProjectStatHistCondition;
}>;
export declare type GetProjectStatHistoryQuery = {
    __typename?: 'Query';
    getProjectStatHist: {
        __typename?: 'GetProjectStatHistOutput';
        project_stat_hist_entries?: Array<{
            __typename?: 'ProjectStatHist';
            project_id: string;
            timestamp: number;
            volume?: number | null;
            volume_usd?: number | null;
            volume_double?: number | null;
            volume_usd_double?: number | null;
            floor_price?: number | null;
            num_of_sales?: number | null;
            max_price?: number | null;
            twitter_followers?: number | null;
            discord_members?: number | null;
            supply?: number | null;
            num_of_token_holders?: number | null;
            num_of_token_listed?: number | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
            total_page_number?: number | null;
        };
    };
};
export declare type SearchProjectByNameQueryVariables = Exact<{
    order_by?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    condition: GetProjectStatByNameCondition;
}>;
export declare type SearchProjectByNameQuery = {
    __typename?: 'Query';
    getProjectStatByName: {
        __typename?: 'GetProjectStatsOutput';
        project_stats?: Array<{
            __typename?: 'ProjectStat';
            project_id: string;
            market_cap?: number | null;
            volume_7day?: number | null;
            volume_1day_change?: number | null;
            floor_price?: number | null;
            floor_price_1day_change?: number | null;
            average_price?: number | null;
            average_price_1day_change?: number | null;
            max_price?: number | null;
            twitter_followers?: number | null;
            num_of_token_listed?: number | null;
            num_of_token_holders?: number | null;
            percentage_of_token_listed?: number | null;
            volume_1day?: number | null;
            volume_1hr?: number | null;
            rank?: number | null;
            project?: {
                __typename?: 'Project';
                supply?: number | null;
                website?: string | null;
                twitter?: string | null;
                discord?: string | null;
                img_url?: string | null;
                is_verified?: boolean | null;
                display_name: string;
                project_slug?: string | null;
                me_slug?: string | null;
                project_attributes?: Array<{
                    __typename?: 'ProjectAttribute';
                    name: string;
                    type: AttributeTypeEnum;
                    values: Array<string>;
                    counts?: any | null;
                    floor_prices?: any | null;
                }> | null;
            } | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
        };
    };
};
export declare type GetUpcomingProjectsQueryVariables = Exact<{
    conditions?: InputMaybe<Array<GetUpcomingProjectsCondition> | GetUpcomingProjectsCondition>;
    order_by?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    pagination_info?: InputMaybe<PaginationConfig>;
}>;
export declare type GetUpcomingProjectsQuery = {
    __typename?: 'Query';
    getUpcomingProjectsRaw: {
        __typename?: 'GetUpcomingProjectsResponse';
        upcoming_projects: Array<{
            __typename?: 'UpcomingProject';
            project_name: string;
            protocol: ProtocolEnum;
            twitter?: string | null;
            discord?: string | null;
            website?: string | null;
            display_name?: string | null;
            supply?: string | null;
            description?: string | null;
            launch_timestamp?: string | null;
            launch_date?: any | null;
            mint_site?: string | null;
            img_url?: string | null;
            price?: string | null;
            is_moonshot: boolean;
            is_featured: boolean;
        }>;
    };
};
export declare type GetWalletStatsQueryVariables = Exact<{
    orderBy?: InputMaybe<Array<OrderConfig> | OrderConfig>;
    paginationInfo?: InputMaybe<PaginationConfig>;
    condition?: InputMaybe<GetWalletStatsCondition>;
}>;
export declare type GetWalletStatsQuery = {
    __typename?: 'Query';
    getWalletStats: {
        __typename?: 'GetWalletStatsOutput';
        wallet_stats?: Array<{
            __typename?: 'WalletStat';
            address: string;
            listed_nfts?: number | null;
            owned_nfts?: number | null;
            portfolio_value?: number | null;
            sol_name?: string | null;
            twitter?: string | null;
            num_sold_1day?: number | null;
            volume_sold_1day?: number | null;
            num_bought_1day?: number | null;
            volume_bought_1day?: number | null;
            num_bids_1day?: number | null;
            bids_made_amount_1day?: number | null;
            max_purchase_1day?: number | null;
            max_sale_1day?: number | null;
            num_minted_1day?: number | null;
            minted_amount_1day?: number | null;
            wallet_score_1day?: number | null;
            max_purchase_item_1day?: any | null;
            max_sale_item_1day?: any | null;
            num_sold?: number | null;
            volume_sold?: number | null;
            num_bought?: number | null;
            volume_bought?: number | null;
            num_bids?: number | null;
            bids_made_amount?: number | null;
            max_purchase?: number | null;
            max_sale?: number | null;
            num_minted?: number | null;
            minted_amount?: number | null;
            wallet_score?: number | null;
            max_purchase_item?: any | null;
            max_sale_item?: any | null;
            rank?: number | null;
        }> | null;
        pagination_info: {
            __typename?: 'PaginationInfoResponseType';
            current_page_number: number;
            current_page_size: number;
            has_next_page: boolean;
        };
    };
};
export declare type GetOverallWalletStatsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type GetOverallWalletStatsQuery = {
    __typename?: 'Query';
    getOverallWalletStats: {
        __typename?: 'GetOverallWalletStatOutput';
        largest_sale_1day?: {
            __typename?: 'WalletStat';
            max_purchase_item_1day?: any | null;
            max_purchase_1day?: number | null;
        } | null;
        top_buyer_1day?: {
            __typename?: 'WalletStat';
            address: string;
            sol_name?: string | null;
            max_purchase_item_1day?: any | null;
        } | null;
        top_seller_1day?: {
            __typename?: 'WalletStat';
            address: string;
            sol_name?: string | null;
            max_sale_item_1day?: any | null;
        } | null;
    };
};
export declare type GetWalletStatsHistQueryVariables = Exact<{
    condition: GetWalletStatsHistCondition;
}>;
export declare type GetWalletStatsHistQuery = {
    __typename?: 'Query';
    getWalletStatsHist: {
        __typename?: 'GetWalletStatsHistOutput';
        wallet_stats_history?: Array<{
            __typename?: 'WalletStatHist';
            timestamp: number;
            portfolio_value?: number | null;
            owned_nfts?: number | null;
        }> | null;
    };
};
export declare const GetBuyTxDocument: import("graphql").DocumentNode;
export declare const SendBuyTxDocument: import("graphql").DocumentNode;
export declare const GetListTxDocument: import("graphql").DocumentNode;
export declare const GetBidTxDocument: import("graphql").DocumentNode;
export declare const GetAcceptBidTxDocument: import("graphql").DocumentNode;
export declare const GetCancelBidTxDocument: import("graphql").DocumentNode;
export declare const GetDelistTxDocument: import("graphql").DocumentNode;
export declare const GetWithdrawEscrowTxDocument: import("graphql").DocumentNode;
export declare const GetTokenHistoryDocument: import("graphql").DocumentNode;
export declare const GetUserHistoryDocument: import("graphql").DocumentNode;
export declare const GetProjectHistoryDocument: import("graphql").DocumentNode;
export declare const GetNonMpaProjectHistoryDocument: import("graphql").DocumentNode;
export declare const GetNonMpaUserHistoryDocument: import("graphql").DocumentNode;
export declare const GetMarketplaceSnapshotsDocument: import("graphql").DocumentNode;
export declare const GetUserBidsDocument: import("graphql").DocumentNode;
export declare const GetUserListingsDocument: import("graphql").DocumentNode;
export declare const GetTokenStateDocument: import("graphql").DocumentNode;
export declare const GetMarketplaceStatusDocument: import("graphql").DocumentNode;
export declare const GetProjectStatsDocument: import("graphql").DocumentNode;
export declare const GetProjectStatHistoryDocument: import("graphql").DocumentNode;
export declare const SearchProjectByNameDocument: import("graphql").DocumentNode;
export declare const GetUpcomingProjectsDocument: import("graphql").DocumentNode;
export declare const GetWalletStatsDocument: import("graphql").DocumentNode;
export declare const GetOverallWalletStatsDocument: import("graphql").DocumentNode;
export declare const GetWalletStatsHistDocument: import("graphql").DocumentNode;
export declare type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    getBuyTx(variables: GetBuyTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetBuyTxQuery>;
    sendBuyTx(variables: SendBuyTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<SendBuyTxQuery>;
    getListTx(variables: GetListTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetListTxQuery>;
    getBidTx(variables: GetBidTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetBidTxQuery>;
    getAcceptBidTx(variables: GetAcceptBidTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetAcceptBidTxQuery>;
    getCancelBidTx(variables: GetCancelBidTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetCancelBidTxQuery>;
    getDelistTx(variables: GetDelistTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetDelistTxQuery>;
    getWithdrawEscrowTx(variables: GetWithdrawEscrowTxQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetWithdrawEscrowTxQuery>;
    getTokenHistory(variables: GetTokenHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetTokenHistoryQuery>;
    getUserHistory(variables: GetUserHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetUserHistoryQuery>;
    getProjectHistory(variables: GetProjectHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetProjectHistoryQuery>;
    getNonMpaProjectHistory(variables: GetNonMpaProjectHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetNonMpaProjectHistoryQuery>;
    getNonMpaUserHistory(variables: GetNonMpaUserHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetNonMpaUserHistoryQuery>;
    getMarketplaceSnapshots(variables?: Exact<{
        condition?: InputMaybe<GetMarketPlaceSnapshotCondition> | undefined;
        pagination_info?: InputMaybe<PaginationConfig> | undefined;
        order_by?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetMarketplaceSnapshotsQuery>;
    getUserBids(variables?: Exact<{
        condition?: InputMaybe<GetMarketPlaceStateCondition> | undefined;
        paginationInfo?: InputMaybe<PaginationConfig> | undefined;
        order_by?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetUserBidsQuery>;
    getUserListings(variables?: Exact<{
        condition?: InputMaybe<GetMarketPlaceStateCondition> | undefined;
        paginationInfo?: InputMaybe<PaginationConfig> | undefined;
        orderBy?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetUserListingsQuery>;
    getTokenState(variables?: Exact<{
        condition?: InputMaybe<GetMarketPlaceStateCondition> | undefined;
        paginationInfo?: InputMaybe<PaginationConfig> | undefined;
        orderBy?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetTokenStateQuery>;
    getMarketplaceStatus(variables?: Exact<{
        [key: string]: never;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetMarketplaceStatusQuery>;
    getProjectStats(variables?: Exact<{
        orderBy?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
        paginationInfo?: InputMaybe<PaginationConfig> | undefined;
        conditions?: InputMaybe<GetProjectStatsCondition> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetProjectStatsQuery>;
    getProjectStatHistory(variables: GetProjectStatHistoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetProjectStatHistoryQuery>;
    searchProjectByName(variables: SearchProjectByNameQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<SearchProjectByNameQuery>;
    getUpcomingProjects(variables?: Exact<{
        conditions?: InputMaybe<GetUpcomingProjectsCondition | GetUpcomingProjectsCondition[]> | undefined;
        order_by?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
        pagination_info?: InputMaybe<PaginationConfig> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetUpcomingProjectsQuery>;
    getWalletStats(variables?: Exact<{
        orderBy?: InputMaybe<OrderConfig | OrderConfig[]> | undefined;
        paginationInfo?: InputMaybe<PaginationConfig> | undefined;
        condition?: InputMaybe<GetWalletStatsCondition> | undefined;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetWalletStatsQuery>;
    getOverallWalletStats(variables?: Exact<{
        [key: string]: never;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetOverallWalletStatsQuery>;
    getWalletStatsHist(variables: GetWalletStatsHistQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetWalletStatsHistQuery>;
};
export declare type Sdk = ReturnType<typeof getSdk>;
